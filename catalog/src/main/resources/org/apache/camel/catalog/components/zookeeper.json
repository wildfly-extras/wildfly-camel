{
 "component": {
    "kind": "component",
    "scheme": "zookeeper",
    "syntax": "zookeeper:serverUrls/path",
    "title": "ZooKeeper",
    "description": "The zookeeper component allows interaction with a ZooKeeper cluster.",
    "label": "clustering",
    "deprecated": "false",
    "async": "false",
    "javaType": "org.apache.camel.component.zookeeper.ZooKeeperComponent",
    "groupId": "org.apache.camel",
    "artifactId": "camel-zookeeper",
    "version": "2.18.0"
  },
  "componentProperties": {
    "configuration": { "kind": "property", "type": "object", "javaType": "org.apache.camel.component.zookeeper.ZooKeeperConfiguration", "deprecated": "false", "secret": "false", "description": "To use a shared ZooKeeperConfiguration" }
  },
  "properties": {
    "serverUrls": { "kind": "path", "group": "common", "required": "true", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The zookeeper server hosts (multiple servers can be separated by comma)" },
    "path": { "kind": "path", "group": "common", "required": "true", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The node in the ZooKeeper server (aka znode)" },
    "awaitExistence": { "kind": "parameter", "group": "common", "type": "boolean", "javaType": "boolean", "deprecated": "true", "secret": "false", "defaultValue": "true", "description": "Not in use" },
    "listChildren": { "kind": "parameter", "group": "common", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Whether the children of the node should be listed" },
    "timeout": { "kind": "parameter", "group": "common", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "defaultValue": "5000", "description": "The time interval to wait on connection before timing out." },
    "backoff": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "long", "deprecated": "false", "secret": "false", "defaultValue": "5000", "description": "The time interval to backoff for after an error before retrying." },
    "bridgeErrorHandler": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "repeat": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Should changes to the znode be 'watched' and repeatedly processed." },
    "sendEmptyMessageOnDelete": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Upon the delete of a znode should an empty message be send to the consumer" },
    "exceptionHandler": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "string", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "RobustInOnly", "InOut", "InOptionalOut", "OutOnly", "RobustOutOnly", "OutIn", "OutOptionalIn" ], "deprecated": "false", "secret": "false", "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "create": { "kind": "parameter", "group": "producer", "label": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Should the endpoint create the node if it does not currently exist." },
    "createMode": { "kind": "parameter", "group": "producer", "label": "producer", "type": "string", "javaType": "java.lang.String", "enum": [ "PERSISTENT", "PERSISTENT_SEQUENTIAL", "EPHEMERAL", "EPHEMERAL_SEQUENTIAL" ], "deprecated": "false", "secret": "false", "defaultValue": "EPHEMERAL", "description": "The create mode that should be used for the newly created node" },
    "synchronous": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)." }
  }
}

