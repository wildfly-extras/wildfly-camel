{
 "component": {
    "kind": "component",
    "scheme": "jpa",
    "syntax": "jpa:entityType",
    "title": "JPA",
    "description": "The jpa component enables you to store and retrieve Java objects from databases using JPA.",
    "label": "database,sql",
    "deprecated": "false",
    "async": "false",
    "javaType": "org.apache.camel.component.jpa.JpaComponent",
    "groupId": "org.apache.camel",
    "artifactId": "camel-jpa",
    "version": "2.18.0"
  },
  "componentProperties": {
    "entityManagerFactory": { "kind": "property", "type": "object", "javaType": "javax.persistence.EntityManagerFactory", "deprecated": "false", "secret": "false", "description": "To use the EntityManagerFactory. This is strongly recommended to configure." },
    "transactionManager": { "kind": "property", "type": "object", "javaType": "org.springframework.transaction.PlatformTransactionManager", "deprecated": "false", "secret": "false", "description": "To use the PlatformTransactionManager for managing transactions." },
    "joinTransaction": { "kind": "property", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "description": "The camel-jpa component will join transaction by default. You can use this option to turn this off for example if you use LOCAL_RESOURCE and join transaction doesn't work with your JPA provider. This option can also be set globally on the JpaComponent instead of having to set it on all endpoints." },
    "sharedEntityManager": { "kind": "property", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "description": "Whether to use Spring's SharedEntityManager for the consumer/producer. Note in most cases joinTransaction should be set to false as this is not an EXTENDED EntityManager." }
  },
  "properties": {
    "entityType": { "kind": "path", "group": "common", "required": "true", "type": "string", "javaType": "java.lang.Class<?>", "deprecated": "false", "secret": "false", "description": "The JPA annotated class to use as entity." },
    "joinTransaction": { "kind": "parameter", "group": "common", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "The camel-jpa component will join transaction by default. You can use this option to turn this off for example if you use LOCAL_RESOURCE and join transaction doesn't work with your JPA provider. This option can also be set globally on the JpaComponent instead of having to set it on all endpoints." },
    "persistenceUnit": { "kind": "parameter", "group": "common", "required": "true", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "defaultValue": "camel", "description": "The JPA persistence unit used by default." },
    "sharedEntityManager": { "kind": "parameter", "group": "common", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Whether to use Spring's SharedEntityManager for the consumer/producer. Note in most cases joinTransaction should be set to false as this is not an EXTENDED EntityManager." },
    "bridgeErrorHandler": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "consumeDelete": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "If true the entity is deleted after it is consumed; if false the entity is not deleted." },
    "consumeLockEntity": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Specifies whether or not to set an exclusive lock on each entity bean while processing the results from polling." },
    "deleteHandler": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "object", "javaType": "org.apache.camel.component.jpa.DeleteHandler<java.lang.Object>", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To use a custom DeleteHandler to delete the row after the consumer is done processing the exchange" },
    "lockModeType": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "string", "javaType": "javax.persistence.LockModeType", "enum": [ "READ", "WRITE", "OPTIMISTIC", "OPTIMISTIC_FORCE_INCREMENT", "PESSIMISTIC_READ", "PESSIMISTIC_WRITE", "PESSIMISTIC_FORCE_INCREMENT", "NONE" ], "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "PESSIMISTIC_WRITE", "description": "To configure the lock mode on the consumer." },
    "maximumResults": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "defaultValue": "-1", "description": "Set the maximum number of results to retrieve on the Query." },
    "maxMessagesPerPoll": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "description": "An integer value to define the maximum number of messages to gather per poll. By default no maximum is set. Can be used to avoid polling many thousands of messages when starting up the server. Set a value of 0 or negative to disable." },
    "namedQuery": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "string", "javaType": "java.lang.String", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To use a named query when consuming data." },
    "nativeQuery": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "string", "javaType": "java.lang.String", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To use a custom native query when consuming data. You may want to use the option consumer.resultClass also when using native queries." },
    "parameters": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "object", "javaType": "java.util.Map<java.lang.String,java.lang.Object>", "optionalPrefix": "consumer.", "multiValue": "true", "deprecated": "false", "secret": "false", "description": "This key/value mapping is used for building the query parameters. It's is expected to be of the generic type java.util.Map where the keys are the named parameters of a given JPA query and the values are their corresponding effective values you want to select for." },
    "preDeleteHandler": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "object", "javaType": "org.apache.camel.component.jpa.DeleteHandler<java.lang.Object>", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To use a custom Pre-DeleteHandler to delete the row after the consumer has read the entity." },
    "query": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "string", "javaType": "java.lang.String", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To use a custom query when consuming data." },
    "resultClass": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "string", "javaType": "java.lang.Class<?>", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "Defines the type of the returned payload (we will call entityManager.createNativeQuery(nativeQuery resultClass) instead of entityManager.createNativeQuery(nativeQuery)). Without this option we will return an object array. Only has an affect when using in conjunction with native query when consuming data." },
    "sendEmptyMessageWhenIdle": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead." },
    "skipLockedEntity": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "To configure whether to use NOWAIT on lock and silently skip the entity." },
    "transacted": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Whether to run the consumer in transacted mode by which all messages will either commit or rollback when the entire batch has been processed. The default behavior (false) is to commit all the previously successfully processed messages and only rollback the last failed message." },
    "exceptionHandler": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "string", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "RobustInOnly", "InOut", "InOptionalOut", "OutOnly", "RobustOutOnly", "OutIn", "OutOptionalIn" ], "deprecated": "false", "secret": "false", "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "pollStrategy": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.PollingConsumerPollStrategy", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel." },
    "flushOnSend": { "kind": "parameter", "group": "producer", "label": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Flushes the EntityManager after the entity bean has been persisted." },
    "remove": { "kind": "parameter", "group": "producer", "label": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Indicates to use entityManager.remove(entity)." },
    "usePassedInEntityManager": { "kind": "parameter", "group": "producer", "label": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If set to true then Camel will use the EntityManager from the header JpaConstants.ENTITYMANAGER instead of the configured entity manager on the component/endpoint. This allows end users to control which entity manager will be in use." },
    "usePersist": { "kind": "parameter", "group": "producer", "label": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Indicates to use entityManager.persist(entity) instead of entityManager.merge(entity). Note: entityManager.persist(entity) doesn't work for detached entities (where the EntityManager has to execute an UPDATE instead of an INSERT query)!" },
    "entityManagerProperties": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "java.util.Map<java.lang.String,java.lang.Object>", "prefix": "emf.", "multiValue": "true", "deprecated": "false", "secret": "false", "description": "Additional properties for the entity manager to use." },
    "synchronous": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)." },
    "backoffErrorThreshold": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "int", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in." },
    "backoffIdleThreshold": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "int", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "The number of subsequent idle polls that should happen before the backoffMultipler should kick-in." },
    "backoffMultiplier": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "int", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured." },
    "delay": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "long", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "500", "description": "Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)." },
    "greedy": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages." },
    "initialDelay": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "long", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "1000", "description": "Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)." },
    "runLoggingLevel": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "string", "javaType": "org.apache.camel.LoggingLevel", "enum": [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ], "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "TRACE", "description": "The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that." },
    "scheduledExecutorService": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "object", "javaType": "java.util.concurrent.ScheduledExecutorService", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool." },
    "scheduler": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "string", "javaType": "org.apache.camel.spi.ScheduledPollConsumerScheduler", "enum": [ "none", "spring", "quartz2" ], "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "none", "description": "To use a cron scheduler from either camel-spring or camel-quartz2 component" },
    "schedulerProperties": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "object", "javaType": "java.util.Map<java.lang.String,java.lang.Object>", "prefix": "scheduler.", "multiValue": "true", "deprecated": "false", "secret": "false", "description": "To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler." },
    "startScheduler": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Whether the scheduler should be auto started." },
    "timeUnit": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "string", "javaType": "java.util.concurrent.TimeUnit", "enum": [ "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS" ], "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "MILLISECONDS", "description": "Time unit for initialDelay and delay options." },
    "useFixedDelay": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details." }
  }
}

