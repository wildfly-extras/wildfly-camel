{
 "component": {
    "kind": "component",
    "scheme": "avro",
    "syntax": "avro:transport:host:port/messageName",
    "title": "Avro",
    "description": "Working with Apache Avro for data serialization.",
    "label": "messaging,transformation",
    "deprecated": "false",
    "async": "true",
    "javaType": "org.apache.camel.component.avro.AvroComponent",
    "groupId": "org.apache.camel",
    "artifactId": "camel-avro",
    "version": "2.18.1"
  },
  "componentProperties": {
    "configuration": { "kind": "property", "type": "object", "javaType": "org.apache.camel.component.avro.AvroConfiguration", "deprecated": "false", "secret": "false", "description": "To use a shared AvroConfiguration to configure options once" }
  },
  "properties": {
    "transport": { "kind": "path", "group": "common", "required": "true", "type": "string", "javaType": "org.apache.camel.component.avro.AvroTransport", "enum": [ "http", "netty" ], "deprecated": "false", "secret": "false", "description": "Transport to use" },
    "port": { "kind": "path", "group": "common", "required": "true", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "description": "Port number to use" },
    "host": { "kind": "path", "group": "common", "required": "true", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Hostname to use" },
    "messageName": { "kind": "path", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The name of the message to send." },
    "protocol": { "kind": "parameter", "group": "common", "type": "object", "javaType": "org.apache.avro.Protocol", "deprecated": "false", "secret": "false", "description": "Avro protocol to use" },
    "protocolClassName": { "kind": "parameter", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Avro protocol to use defined by the FQN class name" },
    "protocolLocation": { "kind": "parameter", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Avro protocol location" },
    "reflectionProtocol": { "kind": "parameter", "group": "common", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If protocol object provided is reflection protocol. Should be used only with protocol parameter because for protocolClassName protocol type will be auto detected" },
    "singleParameter": { "kind": "parameter", "group": "common", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If true consumer parameter won't be wrapped into array. Will fail if protocol specifies more then 1 parameter for the message" },
    "uriAuthority": { "kind": "parameter", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Authority to use (username and password)" },
    "bridgeErrorHandler": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "exceptionHandler": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "string", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "RobustInOnly", "InOut", "InOptionalOut", "OutOnly", "RobustOutOnly", "OutIn", "OutOptionalIn" ], "deprecated": "false", "secret": "false", "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "synchronous": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)." }
  }
}

