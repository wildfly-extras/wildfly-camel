{
 "component": {
    "kind": "component",
    "scheme": "kafka",
    "syntax": "kafka:brokers",
    "title": "Kafka",
    "description": "The kafka component allows messages to be sent to (or consumed from) Apache Kafka brokers.",
    "label": "messaging",
    "deprecated": "false",
    "async": "false",
    "javaType": "org.apache.camel.component.kafka.KafkaComponent",
    "groupId": "org.apache.camel",
    "artifactId": "camel-kafka",
    "version": "2.18.0"
  },
  "componentProperties": {
    "workerPool": { "kind": "property", "type": "object", "javaType": "java.util.concurrent.ExecutorService", "deprecated": "false", "secret": "false", "description": "To use a shared custom worker pool for continue routing Exchange after kafka server has acknowledge the message that was sent to it from KafkaProducer using asynchronous non-blocking processing. If using this option then you must handle the lifecycle of the thread pool to shut the pool down when no longer needed." }
  },
  "properties": {
    "brokers": { "kind": "path", "group": "common", "required": "true", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "This is for bootstrapping and the producer will only use it for getting metadata (topics partitions and replicas). The socket connections for sending the actual data will be established based on the broker information returned in the metadata. The format is host1:port1host2:port2 and the list can be a subset of brokers or a VIP pointing to a subset of brokers. This option is known as metadata.broker.list in the Kafka documentation." },
    "clientId": { "kind": "parameter", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The client id is a user-specified string sent in each request to help trace calls. It should logically identify the application making the request." },
    "groupId": { "kind": "parameter", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "A string that uniquely identifies the group of consumer processes to which this consumer belongs. By setting the same group id multiple processes indicate that they are all part of the same consumer group." },
    "partitioner": { "kind": "parameter", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "defaultValue": "org.apache.kafka.clients.producer.internals.DefaultPartitioner", "description": "The partitioner class for partitioning messages amongst sub-topics. The default partitioner is based on the hash of the key." },
    "topic": { "kind": "parameter", "group": "common", "required": "true", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Name of the topic to use." },
    "autoCommitEnable": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "java.lang.Boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "If true periodically commit to ZooKeeper the offset of messages already fetched by the consumer. This committed offset will be used when the process fails as the position from which the new consumer will begin." },
    "autoCommitIntervalMs": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "5000", "description": "The frequency in ms that the consumer offsets are committed to zookeeper." },
    "autoOffsetReset": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "string", "javaType": "java.lang.String", "enum": [ "latest", "earliest", "none" ], "deprecated": "false", "secret": "false", "defaultValue": "latest", "description": "What to do when there is no initial offset in ZooKeeper or if an offset is out of range: smallest : automatically reset the offset to the smallest offset largest : automatically reset the offset to the largest offset fail: throw exception to the consumer" },
    "bridgeErrorHandler": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "checkCrcs": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "java.lang.Boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Automatically check the CRC32 of the records consumed. This ensures no on-the-wire or on-disk corruption to the messages occurred. This check adds some overhead so it may be disabled in cases seeking extreme performance." },
    "consumerId": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Generated automatically if not set." },
    "consumerRequestTimeoutMs": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "40000", "description": "The configuration controls the maximum amount of time the client will wait for the response of a request. If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted." },
    "consumersCount": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "defaultValue": "1", "description": "The number of consumers that connect to kafka server" },
    "consumerStreams": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "defaultValue": "10", "description": "Number of concurrent consumers on the consumer" },
    "fetchMinBytes": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "1024", "description": "The minimum amount of data the server should return for a fetch request. If insufficient data is available the request will wait for that much data to accumulate before answering the request." },
    "fetchWaitMaxMs": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "500", "description": "The maximum amount of time the server will block before answering the fetch request if there isn't sufficient data to immediately satisfy fetch.min.bytes" },
    "heartbeatIntervalMs": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "3000", "description": "The expected time between heartbeats to the consumer coordinator when using Kafka's group management facilities. Heartbeats are used to ensure that the consumer's session stays active and to facilitate rebalancing when new consumers join or leave the group. The value must be set lower than session.timeout.ms but typically should be set no higher than 1/3 of that value. It can be adjusted even lower to control the expected time for normal rebalances." },
    "keyDeserializer": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "defaultValue": "org.apache.kafka.common.serialization.StringDeserializer", "description": "Deserializer class for key that implements the Deserializer interface." },
    "maxPartitionFetchBytes": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "1048576", "description": "The maximum amount of data per-partition the server will return. The maximum total memory used for a request will be partitions max.partition.fetch.bytes. This size must be at least as large as the maximum message size the server allows or else it is possible for the producer to send messages larger than the consumer can fetch. If that happens the consumer can get stuck trying to fetch a large message on a certain partition." },
    "maxPollRecords": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "2147483647", "description": "A unique string that identifies the consumer group this consumer belongs to. This property is required if the consumer uses either the group management functionality by using subscribe(topic) or the Kafka-based offset management strategy." },
    "partitionAssignor": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "defaultValue": "org.apache.kafka.clients.consumer.RangeAssignor", "description": "The class name of the partition assignment strategy that the client will use to distribute partition ownership amongst consumer instances when group management is used" },
    "pollTimeoutMs": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "java.lang.Long", "deprecated": "false", "secret": "false", "defaultValue": "5000", "description": "The timeout used when polling the KafkaConsumer." },
    "seekToBeginning": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If the option is true then KafkaConsumer will read from beginning on startup." },
    "sessionTimeoutMs": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "30000", "description": "The timeout used to detect failures when using Kafka's group management facilities." },
    "valueDeserializer": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "defaultValue": "org.apache.kafka.common.serialization.StringDeserializer", "description": "Deserializer class for value that implements the Deserializer interface." },
    "exceptionHandler": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "string", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "RobustInOnly", "InOut", "InOptionalOut", "OutOnly", "RobustOutOnly", "OutIn", "OutOptionalIn" ], "deprecated": "false", "secret": "false", "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "bridgeEndpoint": { "kind": "parameter", "group": "producer", "label": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If the option is true then KafkaProducer will ignore the KafkaConstants.TOPIC header setting of the inbound message." },
    "bufferMemorySize": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "33554432", "description": "The total bytes of memory the producer can use to buffer records waiting to be sent to the server. If records are sent faster than they can be delivered to the server the producer will either block or throw an exception based on the preference specified by block.on.buffer.full.This setting should correspond roughly to the total memory the producer will use but is not a hard bound since not all memory the producer uses is used for buffering. Some additional memory will be used for compression (if compression is enabled) as well as for maintaining in-flight requests." },
    "compressionCodec": { "kind": "parameter", "group": "producer", "label": "producer", "type": "string", "javaType": "java.lang.String", "enum": [ "none", "gzip", "snappy", "lz4" ], "deprecated": "false", "secret": "false", "defaultValue": "none", "description": "This parameter allows you to specify the compression codec for all data generated by this producer. Valid values are none gzip and snappy." },
    "connectionMaxIdleMs": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "540000", "description": "Close idle connections after the number of milliseconds specified by this config." },
    "keySerializerClass": { "kind": "parameter", "group": "producer", "label": "producer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The serializer class for keys (defaults to the same as for messages if nothing is given)." },
    "lingerMs": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "0", "description": "The producer groups together any records that arrive in between request transmissions into a single batched request. Normally this occurs only under load when records arrive faster than they can be sent out. However in some circumstances the client may want to reduce the number of requests even under moderate load. This setting accomplishes this by adding a small amount of artificial delaythat is rather than immediately sending out a record the producer will wait for up to the given delay to allow other records to be sent so that the sends can be batched together. This can be thought of as analogous to Nagle's algorithm in TCP. This setting gives the upper bound on the delay for batching: once we get batch.size worth of records for a partition it will be sent immediately regardless of this setting however if we have fewer than this many bytes accumulated for this partition we will 'linger' for the specified time waiting for more records to show up. This setting defaults to 0 (i.e. no delay). Setting linger.ms=5 for example would have the effect of reducing the number of requests sent but would add up to 5ms of latency to records sent in the absense of load." },
    "maxBlockMs": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "60000", "description": "The configuration controls how long sending to kafka will block. These methods can be blocked for multiple reasons. For e.g: buffer full metadata unavailable.This configuration imposes maximum limit on the total time spent in fetching metadata serialization of key and value partitioning and allocation of buffer memory when doing a send(). In case of partitionsFor() this configuration imposes a maximum time threshold on waiting for metadata" },
    "maxInFlightRequest": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "5", "description": "The maximum number of unacknowledged requests the client will send on a single connection before blocking. Note that if this setting is set to be greater than 1 and there are failed sends there is a risk of message re-ordering due to retries (i.e. if retries are enabled)." },
    "maxRequestSize": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "1048576", "description": "The maximum size of a request. This is also effectively a cap on the maximum record size. Note that the server has its own cap on record size which may be different from this. This setting will limit the number of record batches the producer will send in a single request to avoid sending huge requests." },
    "metadataMaxAgeMs": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "300000", "description": "The period of time in milliseconds after which we force a refresh of metadata even if we haven't seen any partition leadership changes to proactively discover any new brokers or partitions." },
    "metricReporters": { "kind": "parameter", "group": "producer", "label": "producer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "A list of classes to use as metrics reporters. Implementing the MetricReporter interface allows plugging in classes that will be notified of new metric creation. The JmxReporter is always included to register JMX statistics." },
    "metricsSampleWindowMs": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "30000", "description": "The number of samples maintained to compute metrics." },
    "noOfMetricsSample": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "2", "description": "The number of samples maintained to compute metrics." },
    "producerBatchSize": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "16384", "description": "The producer will attempt to batch records together into fewer requests whenever multiple records are being sent to the same partition. This helps performance on both the client and the server. This configuration controls the default batch size in bytes. No attempt will be made to batch records larger than this size.Requests sent to brokers will contain multiple batches one for each partition with data available to be sent.A small batch size will make batching less common and may reduce throughput (a batch size of zero will disable batching entirely). A very large batch size may use memory a bit more wastefully as we will always allocate a buffer of the specified batch size in anticipation of additional records." },
    "queueBufferingMaxMessages": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "10000", "description": "The maximum number of unsent messages that can be queued up the producer when using async mode before either the producer must be blocked or data must be dropped." },
    "receiveBufferBytes": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "32768", "description": "The size of the TCP receive buffer (SO_RCVBUF) to use when reading data." },
    "reconnectBackoffMs": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "50", "description": "The amount of time to wait before attempting to reconnect to a given host. This avoids repeatedly connecting to a host in a tight loop. This backoff applies to all requests sent by the consumer to the broker." },
    "recordMetadata": { "kind": "parameter", "group": "producer", "label": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Whether the producer should store the RecordMetadata results from sending to Kafka. The results are stored in a List containing the RecordMetadata metadata's. The list is stored on a header with the key link KafkaConstantsKAFKA_RECORDMETA" },
    "requestRequiredAcks": { "kind": "parameter", "group": "producer", "label": "producer", "type": "string", "javaType": "java.lang.String", "enum": [ "-1", "0", "1", "all" ], "deprecated": "false", "secret": "false", "defaultValue": "1", "description": "The number of acknowledgments the producer requires the leader to have received before considering a request complete. This controls the durability of records that are sent. The following settings are common: acks=0 If set to zero then the producer will not wait for any acknowledgment from the server at all. The record will be immediately added to the socket buffer and considered sent. No guarantee can be made that the server has received the record in this case and the retries configuration will not take effect (as the client won't generally know of any failures). The offset given back for each record will always be set to -1. acks=1 This will mean the leader will write the record to its local log but will respond without awaiting full acknowledgement from all followers. In this case should the leader fail immediately after acknowledging the record but before the followers have replicated it then the record will be lost. acks=all This means the leader will wait for the full set of in-sync replicas to acknowledge the record. This guarantees that the record will not be lost as long as at least one in-sync replica remains alive. This is the strongest available guarantee." },
    "requestTimeoutMs": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "30000", "description": "The amount of time the broker will wait trying to meet the request.required.acks requirement before sending back an error to the client." },
    "retries": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "0", "description": "Setting a value greater than zero will cause the client to resend any record whose send fails with a potentially transient error. Note that this retry is no different than if the client resent the record upon receiving the error. Allowing retries will potentially change the ordering of records because if two records are sent to a single partition and the first fails and is retried but the second succeeds then the second record may appear first." },
    "retryBackoffMs": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "100", "description": "Before each retry the producer refreshes the metadata of relevant topics to see if a new leader has been elected. Since leader election takes a bit of time this property specifies the amount of time that the producer waits before refreshing the metadata." },
    "sendBufferBytes": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "131072", "description": "Socket write buffer size" },
    "serializerClass": { "kind": "parameter", "group": "producer", "label": "producer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The serializer class for messages. The default encoder takes a byte and returns the same byte. The default class is kafka.serializer.DefaultEncoder" },
    "workerPool": { "kind": "parameter", "group": "producer", "label": "producer", "type": "object", "javaType": "java.util.concurrent.ExecutorService", "deprecated": "false", "secret": "false", "description": "To use a custom worker pool for continue routing Exchange after kafka server has acknowledge the message that was sent to it from KafkaProducer using asynchronous non-blocking processing." },
    "workerPoolCoreSize": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "10", "description": "Number of core threads for the worker pool for continue routing Exchange after kafka server has acknowledge the message that was sent to it from KafkaProducer using asynchronous non-blocking processing." },
    "workerPoolMaxSize": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "20", "description": "Maximum number of threads for the worker pool for continue routing Exchange after kafka server has acknowledge the message that was sent to it from KafkaProducer using asynchronous non-blocking processing." },
    "synchronous": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)." },
    "kerberosBeforeReloginMinTime": { "kind": "parameter", "group": "security", "label": "common,security", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "defaultValue": "60000", "description": "Login thread sleep time between refresh attempts." },
    "kerberosInitCmd": { "kind": "parameter", "group": "security", "label": "common,security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "defaultValue": "/usr/bin/kinit", "description": "Kerberos kinit command path. Default is /usr/bin/kinit" },
    "kerberosPrincipalToLocalRules": { "kind": "parameter", "group": "security", "label": "common,security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "defaultValue": "DEFAULT", "description": "A list of rules for mapping from principal names to short names (typically operating system usernames). The rules are evaluated in order and the first rule that matches a principal name is used to map it to a short name. Any later rules in the list are ignored. By default principal names of the form username/hostnameREALM are mapped to username. For more details on the format please see security authorization and acls. Multiple values can be separated by comma" },
    "kerberosRenewJitter": { "kind": "parameter", "group": "security", "label": "common,security", "type": "number", "javaType": "java.lang.Double", "deprecated": "false", "secret": "false", "defaultValue": "0.05", "description": "Percentage of random jitter added to the renewal time." },
    "kerberosRenewWindowFactor": { "kind": "parameter", "group": "security", "label": "common,security", "type": "number", "javaType": "java.lang.Double", "deprecated": "false", "secret": "false", "defaultValue": "0.8", "description": "Login thread will sleep until the specified window factor of time from last refresh to ticket's expiry has been reached at which time it will try to renew the ticket." },
    "saslKerberosServiceName": { "kind": "parameter", "group": "security", "label": "common,security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The Kerberos principal name that Kafka runs as. This can be defined either in Kafka's JAAS config or in Kafka's config." },
    "saslMechanism": { "kind": "parameter", "group": "security", "label": "common,security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "defaultValue": "GSSAPI", "description": "The Simple Authentication and Security Layer (SASL) Mechanism used. For the valid values see http://www.iana.org/assignments/sasl-mechanisms/sasl-mechanisms.xhtml" },
    "securityProtocol": { "kind": "parameter", "group": "security", "label": "common,security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "defaultValue": "PLAINTEXT", "description": "Protocol used to communicate with brokers. Currently only PLAINTEXT and SSL are supported." },
    "sslCipherSuites": { "kind": "parameter", "group": "security", "label": "common,security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "A list of cipher suites. This is a named combination of authentication encryption MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol.By default all the available cipher suites are supported." },
    "sslEnabledProtocols": { "kind": "parameter", "group": "security", "label": "common,security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "defaultValue": "TLSv1.2,TLSv1.1,TLSv1", "description": "The list of protocols enabled for SSL connections. TLSv1.2 TLSv1.1 and TLSv1 are enabled by default." },
    "sslEndpointAlgorithm": { "kind": "parameter", "group": "security", "label": "common,security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The endpoint identification algorithm to validate server hostname using server certificate." },
    "sslKeymanagerAlgorithm": { "kind": "parameter", "group": "security", "label": "common,security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "defaultValue": "SunX509", "description": "The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine." },
    "sslKeyPassword": { "kind": "parameter", "group": "security", "label": "producer,security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The password of the private key in the key store file. This is optional for client." },
    "sslKeystoreLocation": { "kind": "parameter", "group": "security", "label": "producer,security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The location of the key store file. This is optional for client and can be used for two-way authentication for client." },
    "sslKeystorePassword": { "kind": "parameter", "group": "security", "label": "producer,security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The store password for the key store file.This is optional for client and only needed if ssl.keystore.location is configured." },
    "sslKeystoreType": { "kind": "parameter", "group": "security", "label": "common,security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "defaultValue": "JKS", "description": "The file format of the key store file. This is optional for client. Default value is JKS" },
    "sslProtocol": { "kind": "parameter", "group": "security", "label": "common,security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "defaultValue": "TLS", "description": "The SSL protocol used to generate the SSLContext. Default setting is TLS which is fine for most cases. Allowed values in recent JVMs are TLS TLSv1.1 and TLSv1.2. SSL SSLv2 and SSLv3 may be supported in older JVMs but their usage is discouraged due to known security vulnerabilities." },
    "sslProvider": { "kind": "parameter", "group": "security", "label": "common,security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The name of the security provider used for SSL connections. Default value is the default security provider of the JVM." },
    "sslTrustmanagerAlgorithm": { "kind": "parameter", "group": "security", "label": "common,security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "defaultValue": "PKIX", "description": "The algorithm used by trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine." },
    "sslTruststoreLocation": { "kind": "parameter", "group": "security", "label": "producer,security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The location of the trust store file." },
    "sslTruststorePassword": { "kind": "parameter", "group": "security", "label": "producer,security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The password for the trust store file." },
    "sslTruststoreType": { "kind": "parameter", "group": "security", "label": "common,security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "defaultValue": "JKS", "description": "The file format of the trust store file. Default value is JKS." }
  }
}

