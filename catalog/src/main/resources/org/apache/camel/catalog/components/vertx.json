{
 "component": {
    "kind": "component",
    "scheme": "vertx",
    "syntax": "vertx:address",
    "title": "Vert.x",
    "description": "The vertx component is used for sending and receive messages from a vertx event bus.",
    "label": "eventbus",
    "deprecated": "false",
    "async": "true",
    "javaType": "org.apache.camel.component.vertx.VertxComponent",
    "groupId": "org.apache.camel",
    "artifactId": "camel-vertx",
    "version": "2.18.0"
  },
  "componentProperties": {
    "vertxFactory": { "kind": "property", "type": "object", "javaType": "io.vertx.core.spi.VertxFactory", "deprecated": "false", "secret": "false", "description": "To use a custom VertxFactory implementation" },
    "host": { "kind": "property", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Hostname for creating an embedded clustered EventBus" },
    "port": { "kind": "property", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "description": "Port for creating an embedded clustered EventBus" },
    "vertxOptions": { "kind": "property", "type": "object", "javaType": "io.vertx.core.VertxOptions", "deprecated": "false", "secret": "false", "description": "Options to use for creating vertx" },
    "vertx": { "kind": "property", "type": "object", "javaType": "io.vertx.core.Vertx", "deprecated": "false", "secret": "false", "description": "To use the given vertx EventBus instead of creating a new embedded EventBus" },
    "timeout": { "kind": "property", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "description": "Timeout in seconds to wait for clustered Vertx EventBus to be ready. The default value is 60." }
  },
  "properties": {
    "address": { "kind": "path", "group": "common", "required": "true", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Sets the event bus address used to communicate" },
    "pubSub": { "kind": "parameter", "group": "common", "type": "boolean", "javaType": "java.lang.Boolean", "deprecated": "false", "secret": "false", "description": "Whether to use publish/subscribe instead of point to point when sending to a vertx endpoint." },
    "bridgeErrorHandler": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "exceptionHandler": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "string", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "RobustInOnly", "InOut", "InOptionalOut", "OutOnly", "RobustOutOnly", "OutIn", "OutOptionalIn" ], "deprecated": "false", "secret": "false", "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "synchronous": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)." }
  }
}

