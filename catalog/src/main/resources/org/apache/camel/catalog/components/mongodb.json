{
 "component": {
    "kind": "component",
    "scheme": "mongodb",
    "syntax": "mongodb:connectionBean",
    "title": "MongoDB",
    "description": "Component for working with documents stored in MongoDB database.",
    "label": "database,nosql",
    "deprecated": "false",
    "async": "false",
    "javaType": "org.apache.camel.component.mongodb.MongoDbComponent",
    "groupId": "org.apache.camel",
    "artifactId": "camel-mongodb",
    "version": "2.18.0"
  },
  "componentProperties": {
  },
  "properties": {
    "connectionBean": { "kind": "path", "group": "common", "required": "true", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Name of com.mongodb.Mongo to use." },
    "collection": { "kind": "parameter", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Sets the name of the MongoDB collection to bind to this endpoint" },
    "collectionIndex": { "kind": "parameter", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Sets the collection index (JSON FORMAT : field1 : order1 field2 : order2)" },
    "createCollection": { "kind": "parameter", "group": "common", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Create collection during initialisation if it doesn't exist. Default is true." },
    "database": { "kind": "parameter", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Sets the name of the MongoDB database to target" },
    "operation": { "kind": "parameter", "group": "common", "type": "string", "javaType": "org.apache.camel.component.mongodb.MongoDbOperation", "enum": [ "findById", "findOneByQuery", "findAll", "insert", "save", "update", "remove", "aggregate", "getDbStats", "getColStats", "count", "command" ], "deprecated": "false", "secret": "false", "description": "Sets the operation this endpoint will execute against MongoDB. For possible values see MongoDbOperation." },
    "outputType": { "kind": "parameter", "group": "common", "type": "string", "javaType": "org.apache.camel.component.mongodb.MongoDbOutputType", "enum": [ "DBObjectList", "DBObject", "DBCursor" ], "deprecated": "false", "secret": "false", "description": "Convert the output of the producer to the selected type : DBObjectList DBObject or DBCursor. DBObjectList or DBObject applies to findAll. DBCursor applies to all other operations." },
    "writeConcern": { "kind": "parameter", "group": "common", "type": "string", "javaType": "com.mongodb.WriteConcern", "enum": [ "ACKNOWLEDGED", "W1", "W2", "W3", "UNACKNOWLEDGED", "JOURNALED", "MAJORITY", "SAFE" ], "deprecated": "false", "secret": "false", "defaultValue": "ACKNOWLEDGED", "description": "Set the WriteConcern for write operations on MongoDB using the standard ones. Resolved from the fields of the WriteConcern class by calling the link WriteConcernvalueOf(String) method." },
    "bridgeErrorHandler": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "exceptionHandler": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "string", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "RobustInOnly", "InOut", "InOptionalOut", "OutOnly", "RobustOutOnly", "OutIn", "OutOptionalIn" ], "deprecated": "false", "secret": "false", "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "cursorRegenerationDelay": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "integer", "javaType": "long", "deprecated": "false", "secret": "false", "defaultValue": "1000", "description": "MongoDB tailable cursors will block until new data arrives. If no new data is inserted after some time the cursor will be automatically freed and closed by the MongoDB server. The client is expected to regenerate the cursor if needed. This value specifies the time to wait before attempting to fetch a new cursor and if the attempt fails how long before the next attempt is made. Default value is 1000ms." },
    "dynamicity": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Sets whether this endpoint will attempt to dynamically resolve the target database and collection from the incoming Exchange properties. Can be used to override at runtime the database and collection specified on the otherwise static endpoint URI. It is disabled by default to boost performance. Enabling it will take a minimal performance hit." },
    "readPreference": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "com.mongodb.ReadPreference", "deprecated": "false", "secret": "false", "description": "Sets a MongoDB ReadPreference on the Mongo connection. Read preferences set directly on the connection will be overridden by this setting. The link com.mongodb.ReadPreferencevalueOf(String) utility method is used to resolve the passed readPreference value. Some examples for the possible values are nearest primary or secondary etc." },
    "synchronous": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)." },
    "writeResultAsHeader": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "In write operations it determines whether instead of returning WriteResult as the body of the OUT message we transfer the IN message to the OUT and attach the WriteResult as a header." },
    "persistentId": { "kind": "parameter", "group": "tail", "label": "tail", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "One tail tracking collection can host many trackers for several tailable consumers. To keep them separate each tracker should have its own unique persistentId." },
    "persistentTailTracking": { "kind": "parameter", "group": "tail", "label": "tail", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Enable persistent tail tracking which is a mechanism to keep track of the last consumed message across system restarts. The next time the system is up the endpoint will recover the cursor from the point where it last stopped slurping records." },
    "tailTrackCollection": { "kind": "parameter", "group": "tail", "label": "tail", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Collection where tail tracking information will be persisted. If not specified link MongoDbTailTrackingConfigDEFAULT_COLLECTION will be used by default." },
    "tailTrackDb": { "kind": "parameter", "group": "tail", "label": "tail", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Indicates what database the tail tracking mechanism will persist to. If not specified the current database will be picked by default. Dynamicity will not be taken into account even if enabled i.e. the tail tracking database will not vary past endpoint initialisation." },
    "tailTrackField": { "kind": "parameter", "group": "tail", "label": "tail", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Field where the last tracked value will be placed. If not specified link MongoDbTailTrackingConfigDEFAULT_FIELD will be used by default." },
    "tailTrackIncreasingField": { "kind": "parameter", "group": "tail", "label": "tail", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Correlation field in the incoming record which is of increasing nature and will be used to position the tailing cursor every time it is generated. The cursor will be (re)created with a query of type: tailTrackIncreasingField lastValue (possibly recovered from persistent tail tracking). Can be of type Integer Date String etc. NOTE: No support for dot notation at the current time so the field should be at the top level of the document." }
  }
}

