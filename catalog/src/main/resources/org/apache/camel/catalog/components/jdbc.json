{
 "component": {
    "kind": "component",
    "scheme": "jdbc",
    "syntax": "jdbc:dataSourceName",
    "title": "JDBC",
    "description": "The jdbc component enables you to access databases through JDBC where SQL queries are sent in the message body.",
    "label": "database,sql",
    "deprecated": "false",
    "async": "false",
    "producerOnly": "true",
    "javaType": "org.apache.camel.component.jdbc.JdbcComponent",
    "groupId": "org.apache.camel",
    "artifactId": "camel-jdbc",
    "version": "2.18.0"
  },
  "componentProperties": {
    "dataSource": { "kind": "property", "type": "object", "javaType": "javax.sql.DataSource", "deprecated": "false", "secret": "false", "description": "To use the DataSource instance instead of looking up the data source by name from the registry." }
  },
  "properties": {
    "dataSourceName": { "kind": "path", "group": "producer", "required": "true", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Name of DataSource to lookup in the Registry." },
    "allowNamedParameters": { "kind": "parameter", "group": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Whether to allow using named parameters in the queries." },
    "beanRowMapper": { "kind": "parameter", "group": "producer", "type": "object", "javaType": "org.apache.camel.component.jdbc.BeanRowMapper", "deprecated": "false", "secret": "false", "description": "To use a custom org.apache.camel.component.jdbc.BeanRowMapper when using outputClass. The default implementation will lower case the row names and skip underscores and dashes. For example CUST_ID is mapped as custId." },
    "outputClass": { "kind": "parameter", "group": "producer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Specify the full package and class name to use as conversion when outputType=SelectOne or SelectList." },
    "outputType": { "kind": "parameter", "group": "producer", "type": "string", "javaType": "org.apache.camel.component.jdbc.JdbcOutputType", "enum": [ "SelectOne", "SelectList", "StreamList" ], "deprecated": "false", "secret": "false", "defaultValue": "SelectList", "description": "Determines the output the producer should use." },
    "parameters": { "kind": "parameter", "group": "producer", "type": "object", "javaType": "java.util.Map<java.lang.String,java.lang.Object>", "prefix": "statement.", "multiValue": "true", "deprecated": "false", "secret": "false", "description": "Optional parameters to the java.sql.Statement. For example to set maxRows fetchSize etc." },
    "prepareStatementStrategy": { "kind": "parameter", "group": "producer", "type": "object", "javaType": "org.apache.camel.component.jdbc.JdbcPrepareStatementStrategy", "deprecated": "false", "secret": "false", "description": "Allows to plugin to use a custom org.apache.camel.component.jdbc.JdbcPrepareStatementStrategy to control preparation of the query and prepared statement." },
    "readSize": { "kind": "parameter", "group": "producer", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "description": "The default maximum number of rows that can be read by a polling query. The default value is 0." },
    "resetAutoCommit": { "kind": "parameter", "group": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Camel will set the autoCommit on the JDBC connection to be false commit the change after executed the statement and reset the autoCommit flag of the connection at the end if the resetAutoCommit is true. If the JDBC connection doesn't support to reset the autoCommit flag you can set the resetAutoCommit flag to be false and Camel will not try to reset the autoCommit flag. When used with XA transactions you most likely need to set it to false so that the transaction manager is in charge of committing this tx." },
    "transacted": { "kind": "parameter", "group": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Whether transactions are in use." },
    "useGetBytesForBlob": { "kind": "parameter", "group": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "To read BLOB columns as bytes instead of string data. This may be needed for certain databases such as Oracle where you must read BLOB columns as bytes." },
    "useHeadersAsParameters": { "kind": "parameter", "group": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Set this option to true to use the prepareStatementStrategy with named parameters. This allows to define queries with named placeholders and use headers with the dynamic values for the query placeholders." },
    "useJDBC4ColumnNameAndLabelSemantics": { "kind": "parameter", "group": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Sets whether to use JDBC 4 or JDBC 3.0 or older semantic when retrieving column name. JDBC 4.0 uses columnLabel to get the column name where as JDBC 3.0 uses both columnName or columnLabel. Unfortunately JDBC drivers behave differently so you can use this option to work out issues around your JDBC driver if you get problem using this component This option is default true." },
    "synchronous": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)." }
  }
}

