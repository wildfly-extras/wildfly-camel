{
 "component": {
    "kind": "component",
    "scheme": "quartz2",
    "syntax": "quartz2:groupName/triggerName",
    "title": "Quartz2",
    "description": "Provides a scheduled delivery of messages using the Quartz 2.x scheduler.",
    "label": "scheduling",
    "deprecated": "false",
    "async": "false",
    "consumerOnly": "true",
    "javaType": "org.apache.camel.component.quartz2.QuartzComponent",
    "groupId": "org.apache.camel",
    "artifactId": "camel-quartz2",
    "version": "2.18.0"
  },
  "componentProperties": {
    "autoStartScheduler": { "kind": "property", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "description": "Whether or not the scheduler should be auto started. This options is default true" },
    "startDelayedSeconds": { "kind": "property", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "description": "Seconds to wait before starting the quartz scheduler." },
    "prefixJobNameWithEndpointId": { "kind": "property", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "description": "Whether to prefix the quartz job with the endpoint id. This option is default false." },
    "enableJmx": { "kind": "property", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "description": "Whether to enable Quartz JMX which allows to manage the Quartz scheduler from JMX. This options is default true" },
    "properties": { "kind": "property", "type": "object", "javaType": "java.util.Properties", "deprecated": "false", "secret": "false", "description": "Properties to configure the Quartz scheduler." },
    "propertiesFile": { "kind": "property", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "File name of the properties to load from the classpath" },
    "prefixInstanceName": { "kind": "property", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "description": "Whether to prefix the Quartz Scheduler instance name with the CamelContext name. This is enabled by default to let each CamelContext use its own Quartz scheduler instance by default. You can set this option to false to reuse Quartz scheduler instances between multiple CamelContext's." },
    "schedulerFactory": { "kind": "property", "type": "object", "javaType": "org.quartz.SchedulerFactory", "deprecated": "false", "secret": "false", "description": "To use the custom SchedulerFactory which is used to create the Scheduler." },
    "scheduler": { "kind": "property", "type": "object", "javaType": "org.quartz.Scheduler", "deprecated": "false", "secret": "false", "description": "To use the custom configured Quartz scheduler instead of creating a new Scheduler." }
  },
  "properties": {
    "groupName": { "kind": "path", "group": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "defaultValue": "Camel", "description": "The quartz group name to use. The combination of group name and timer name should be unique." },
    "triggerName": { "kind": "path", "group": "consumer", "required": "true", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The quartz timer name to use. The combination of group name and timer name should be unique." },
    "bridgeErrorHandler": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "cron": { "kind": "parameter", "group": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Specifies a cron expression to define when to trigger." },
    "deleteJob": { "kind": "parameter", "group": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "If set to true then the trigger automatically delete when route stop. Else if set to false it will remain in scheduler. When set to false it will also mean user may reuse pre-configured trigger with camel Uri. Just ensure the names match. Notice you cannot have both deleteJob and pauseJob set to true." },
    "durableJob": { "kind": "parameter", "group": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Whether or not the job should remain stored after it is orphaned (no triggers point to it)." },
    "pauseJob": { "kind": "parameter", "group": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If set to true then the trigger automatically pauses when route stop. Else if set to false it will remain in scheduler. When set to false it will also mean user may reuse pre-configured trigger with camel Uri. Just ensure the names match. Notice you cannot have both deleteJob and pauseJob set to true." },
    "recoverableJob": { "kind": "parameter", "group": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Instructs the scheduler whether or not the job should be re-executed if a 'recovery' or 'fail-over' situation is encountered." },
    "stateful": { "kind": "parameter", "group": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Uses a Quartz PersistJobDataAfterExecution and DisallowConcurrentExecution instead of the default job." },
    "exceptionHandler": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "string", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "RobustInOnly", "InOut", "InOptionalOut", "OutOnly", "RobustOutOnly", "OutIn", "OutOptionalIn" ], "deprecated": "false", "secret": "false", "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "customCalendar": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "org.quartz.Calendar", "deprecated": "false", "secret": "false", "description": "Specifies a custom calendar to avoid specific range of date" },
    "jobParameters": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "java.util.Map<java.lang.String,java.lang.Object>", "prefix": "job.", "multiValue": "true", "deprecated": "false", "secret": "false", "description": "To configure additional options on the job." },
    "prefixJobNameWithEndpointId": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Whether the job name should be prefixed with endpoint id" },
    "synchronous": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)." },
    "triggerParameters": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "java.util.Map<java.lang.String,java.lang.Object>", "prefix": "trigger.", "multiValue": "true", "deprecated": "false", "secret": "false", "description": "To configure additional options on the trigger." },
    "usingFixedCamelContextName": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If it is true JobDataMap uses the CamelContext name directly to reference the CamelContext if it is false JobDataMap uses use the CamelContext management name which could be changed during the deploy time." },
    "autoStartScheduler": { "kind": "parameter", "group": "scheduler", "label": "scheduler", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Whether or not the scheduler should be auto started." },
    "fireNow": { "kind": "parameter", "group": "scheduler", "label": "scheduler", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If it is true will fire the trigger when the route is start when using SimpleTrigger." },
    "startDelayedSeconds": { "kind": "parameter", "group": "scheduler", "label": "scheduler", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "description": "Seconds to wait before starting the quartz scheduler." },
    "triggerStartDelay": { "kind": "parameter", "group": "scheduler", "label": "scheduler", "type": "integer", "javaType": "long", "deprecated": "false", "secret": "false", "defaultValue": "500", "description": "In case of scheduler has already started we want the trigger start slightly after current time to ensure endpoint is fully started before the job kicks in." }
  }
}

