{
 "component": {
    "kind": "component",
    "scheme": "netty4",
    "syntax": "netty4:protocol:host:port",
    "title": "Netty4",
    "description": "Socket level networking using TCP or UDP with the Netty 4.x library.",
    "label": "networking,tcp,udp",
    "deprecated": "false",
    "async": "true",
    "javaType": "org.apache.camel.component.netty4.NettyComponent",
    "groupId": "org.apache.camel",
    "artifactId": "camel-netty4",
    "version": "2.18.0"
  },
  "componentProperties": {
    "maximumPoolSize": { "kind": "property", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "description": "The thread pool size for the EventExecutorGroup if its in use. The default value is 16." },
    "configuration": { "kind": "property", "type": "object", "javaType": "org.apache.camel.component.netty4.NettyConfiguration", "deprecated": "false", "secret": "false", "description": "To use the NettyConfiguration as configuration when creating endpoints." },
    "executorService": { "kind": "property", "type": "object", "javaType": "io.netty.util.concurrent.EventExecutorGroup", "deprecated": "false", "secret": "false", "description": "To use the given EventExecutorGroup" }
  },
  "properties": {
    "protocol": { "kind": "path", "group": "common", "required": "true", "type": "string", "javaType": "java.lang.String", "enum": [ "tcp", "udp" ], "deprecated": "false", "secret": "false", "description": "The protocol to use which can be tcp or udp." },
    "host": { "kind": "path", "group": "common", "required": "true", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The hostname. For the consumer the hostname is localhost or 0.0.0.0 For the producer the hostname is the remote host to connect to" },
    "port": { "kind": "path", "group": "common", "required": "true", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "description": "The host port number" },
    "disconnect": { "kind": "parameter", "group": "common", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Whether or not to disconnect(close) from Netty Channel right after use. Can be used for both consumer and producer." },
    "keepAlive": { "kind": "parameter", "group": "common", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Setting to ensure socket is not closed due to inactivity" },
    "reuseAddress": { "kind": "parameter", "group": "common", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Setting to facilitate socket multiplexing" },
    "sync": { "kind": "parameter", "group": "common", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Setting to set endpoint as one-way or request-response" },
    "tcpNoDelay": { "kind": "parameter", "group": "common", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Setting to improve TCP protocol performance" },
    "bridgeErrorHandler": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "broadcast": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Setting to choose Multicast over UDP" },
    "clientMode": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If the clientMode is true netty consumer will connect the address as a TCP client." },
    "reconnect": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Used only in clientMode in consumer the consumer will attempt to reconnect on disconnection if this is enabled" },
    "reconnectInterval": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "defaultValue": "10000", "description": "Used if reconnect and clientMode is enabled. The interval in milli seconds to attempt reconnection" },
    "backlog": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "description": "Allows to configure a backlog for netty consumer (server). Note the backlog is just a best effort depending on the OS. Setting this option to a value such as 200 500 or 1000 tells the TCP stack how long the accept queue can be If this option is not configured then the backlog depends on OS setting." },
    "bossCount": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "defaultValue": "1", "description": "When netty works on nio mode it uses default bossCount parameter from Netty which is 1. User can use this operation to override the default bossCount from Netty" },
    "bossGroup": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "io.netty.channel.EventLoopGroup", "deprecated": "false", "secret": "false", "description": "Set the BossGroup which could be used for handling the new connection of the server side across the NettyEndpoint" },
    "disconnectOnNoReply": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "If sync is enabled then this option dictates NettyConsumer if it should disconnect where there is no reply to send back." },
    "exceptionHandler": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "string", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "RobustInOnly", "InOut", "InOptionalOut", "OutOnly", "RobustOutOnly", "OutIn", "OutOptionalIn" ], "deprecated": "false", "secret": "false", "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "nettyServerBootstrapFactory": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.component.netty4.NettyServerBootstrapFactory", "deprecated": "false", "secret": "false", "description": "To use a custom NettyServerBootstrapFactory" },
    "networkInterface": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "When using UDP then this option can be used to specify a network interface by its name such as eth0 to join a multicast group." },
    "noReplyLogLevel": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "string", "javaType": "org.apache.camel.LoggingLevel", "enum": [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ], "deprecated": "false", "secret": "false", "defaultValue": "WARN", "description": "If sync is enabled this option dictates NettyConsumer which logging level to use when logging a there is no reply to send back." },
    "serverClosedChannelExceptionCaughtLogLevel": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "string", "javaType": "org.apache.camel.LoggingLevel", "enum": [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ], "deprecated": "false", "secret": "false", "defaultValue": "DEBUG", "description": "If the server (NettyConsumer) catches an java.nio.channels.ClosedChannelException then its logged using this logging level. This is used to avoid logging the closed channel exceptions as clients can disconnect abruptly and then cause a flood of closed exceptions in the Netty server." },
    "serverExceptionCaughtLogLevel": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "string", "javaType": "org.apache.camel.LoggingLevel", "enum": [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ], "deprecated": "false", "secret": "false", "defaultValue": "WARN", "description": "If the server (NettyConsumer) catches an exception then its logged using this logging level." },
    "serverInitializerFactory": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.component.netty4.ServerInitializerFactory", "deprecated": "false", "secret": "false", "description": "To use a custom ServerInitializerFactory" },
    "usingExecutorService": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Whether to use ordered thread pool to ensure events are processed orderly on the same channel." },
    "workerCount": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "description": "When netty works on nio mode it uses default workerCount parameter from Netty which is cpu_core_threads2. User can use this operation to override the default workerCount from Netty" },
    "workerGroup": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "io.netty.channel.EventLoopGroup", "deprecated": "false", "secret": "false", "description": "To use a explicit EventLoopGroup as the boss thread pool. For example to share a thread pool with multiple consumers. By default each consumer has their own boss pool with 1 core thread." },
    "connectTimeout": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "defaultValue": "10000", "description": "Time to wait for a socket connection to be available. Value is in millis." },
    "requestTimeout": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "long", "deprecated": "false", "secret": "false", "description": "Allows to use a timeout for the Netty producer when calling a remote server. By default no timeout is in use. The value is in milli seconds so eg 30000 is 30 seconds. The requestTimeout is using Netty's ReadTimeoutHandler to trigger the timeout." },
    "reuseChannel": { "kind": "parameter", "group": "producer", "label": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "This option allows producers to reuse the same Netty Channel for the lifecycle of processing the Exchange. This is useable if you need to call a server multiple times in a Camel route and want to use the same network connection. When using this the channel is not returned to the connection pool until the Exchange is done; or disconnected if the disconnect option is set to true. The reused Channel is stored on the Exchange as an exchange property with the key link NettyConstantsNETTY_CHANNEL which allows you to obtain the channel during routing and use it as well." },
    "clientInitializerFactory": { "kind": "parameter", "group": "producer (advanced)", "label": "producer,advanced", "type": "object", "javaType": "org.apache.camel.component.netty4.ClientInitializerFactory", "deprecated": "false", "secret": "false", "description": "To use a custom ClientInitializerFactory" },
    "lazyChannelCreation": { "kind": "parameter", "group": "producer (advanced)", "label": "producer,advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Channels can be lazily created to avoid exceptions if the remote server is not up and running when the Camel producer is started." },
    "producerPoolEnabled": { "kind": "parameter", "group": "producer (advanced)", "label": "producer,advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Whether producer pool is enabled or not. Important: Do not turn this off as the pooling is needed for handling concurrency and reliable request/reply." },
    "producerPoolMaxActive": { "kind": "parameter", "group": "producer (advanced)", "label": "producer,advanced", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "defaultValue": "-1", "description": "Sets the cap on the number of objects that can be allocated by the pool (checked out to clients or idle awaiting checkout) at a given time. Use a negative value for no limit." },
    "producerPoolMaxIdle": { "kind": "parameter", "group": "producer (advanced)", "label": "producer,advanced", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "defaultValue": "100", "description": "Sets the cap on the number of idle instances in the pool." },
    "producerPoolMinEvictableIdle": { "kind": "parameter", "group": "producer (advanced)", "label": "producer,advanced", "type": "integer", "javaType": "long", "deprecated": "false", "secret": "false", "defaultValue": "300000", "description": "Sets the minimum amount of time (value in millis) an object may sit idle in the pool before it is eligible for eviction by the idle object evictor." },
    "producerPoolMinIdle": { "kind": "parameter", "group": "producer (advanced)", "label": "producer,advanced", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "description": "Sets the minimum number of instances allowed in the producer pool before the evictor thread (if active) spawns new objects." },
    "udpConnectionlessSending": { "kind": "parameter", "group": "producer (advanced)", "label": "producer,advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "This option supports connection less udp sending which is a real fire and forget. A connected udp send receive the PortUnreachableException if no one is listen on the receiving port." },
    "useByteBuf": { "kind": "parameter", "group": "producer (advanced)", "label": "producer,advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If the useByteBuf is true netty producer will turn the message body into ByteBuf before sending it out." },
    "allowSerializedHeaders": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Only used for TCP when transferExchange is true. When set to true serializable objects in headers and properties will be added to the exchange. Otherwise Camel will exclude any non-serializable objects and log it at WARN level." },
    "bootstrapConfiguration": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "org.apache.camel.component.netty4.NettyServerBootstrapConfiguration", "deprecated": "false", "secret": "false", "description": "To use a custom configured NettyServerBootstrapConfiguration for configuring this endpoint." },
    "channelGroup": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "io.netty.channel.group.ChannelGroup", "deprecated": "false", "secret": "false", "description": "To use a explicit ChannelGroup." },
    "nativeTransport": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Whether to use native transport instead of NIO. Native transport takes advantage of the host operating system and is only supported on some platforms. You need to add the netty JAR for the host operating system you are using. See more details at: http://netty.io/wiki/native-transports.html" },
    "options": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "java.util.Map<java.lang.String,java.lang.Object>", "prefix": "option.", "multiValue": "true", "deprecated": "false", "secret": "false", "description": "Allows to configure additional netty options using option. as prefix. For example option.child.keepAlive=false to set the netty option child.keepAlive=false. See the Netty documentation for possible options that can be used." },
    "receiveBufferSize": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "defaultValue": "65536", "description": "The TCP/UDP buffer sizes to be used during inbound communication. Size is bytes." },
    "receiveBufferSizePredictor": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "description": "Configures the buffer size predictor. See details at Jetty documentation and this mail thread." },
    "sendBufferSize": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "defaultValue": "65536", "description": "The TCP/UDP buffer sizes to be used during outbound communication. Size is bytes." },
    "synchronous": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)." },
    "transferExchange": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Only used for TCP. You can transfer the exchange over the wire instead of just the body. The following fields are transferred: In body Out body fault body In headers Out headers fault headers exchange properties exchange exception. This requires that the objects are serializable. Camel will exclude any non-serializable objects and log it at WARN level." },
    "udpByteArrayCodec": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "For UDP only. If enabled the using byte array codec instead of Java serialization protocol." },
    "allowDefaultCodec": { "kind": "parameter", "group": "codec", "label": "codec", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "The netty component installs a default codec if both encoder/deocder is null and textline is false. Setting allowDefaultCodec to false prevents the netty component from installing a default codec as the first element in the filter chain." },
    "autoAppendDelimiter": { "kind": "parameter", "group": "codec", "label": "codec", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Whether or not to auto append missing end delimiter when sending using the textline codec." },
    "decoder": { "kind": "parameter", "group": "codec", "label": "codec", "type": "object", "javaType": "io.netty.channel.ChannelHandler", "deprecated": "true", "secret": "false", "description": "A custom ChannelHandler class that can be used to perform special marshalling of inbound payloads." },
    "decoderMaxLineLength": { "kind": "parameter", "group": "codec", "label": "codec", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "defaultValue": "1024", "description": "The max line length to use for the textline codec." },
    "decoders": { "kind": "parameter", "group": "codec", "label": "codec", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "A list of decoders to be used. You can use a String which have values separated by comma and have the values be looked up in the Registry. Just remember to prefix the value with so Camel knows it should lookup." },
    "delimiter": { "kind": "parameter", "group": "codec", "label": "codec", "type": "string", "javaType": "org.apache.camel.component.netty4.TextLineDelimiter", "enum": [ "LINE", "NULL" ], "deprecated": "false", "secret": "false", "defaultValue": "LINE", "description": "The delimiter to use for the textline codec. Possible values are LINE and NULL." },
    "encoder": { "kind": "parameter", "group": "codec", "label": "codec", "type": "object", "javaType": "io.netty.channel.ChannelHandler", "deprecated": "true", "secret": "false", "description": "A custom ChannelHandler class that can be used to perform special marshalling of outbound payloads." },
    "encoders": { "kind": "parameter", "group": "codec", "label": "codec", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "A list of encoders to be used. You can use a String which have values separated by comma and have the values be looked up in the Registry. Just remember to prefix the value with so Camel knows it should lookup." },
    "encoding": { "kind": "parameter", "group": "codec", "label": "codec", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The encoding (a charset name) to use for the textline codec. If not provided Camel will use the JVM default Charset." },
    "textline": { "kind": "parameter", "group": "codec", "label": "codec", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Only used for TCP. If no codec is specified you can use this flag to indicate a text line based codec; if not specified or the value is false then Object Serialization is assumed over TCP." },
    "enabledProtocols": { "kind": "parameter", "group": "security", "label": "security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "defaultValue": "TLSv1,TLSv1.1,TLSv1.2", "description": "Which protocols to enable when using SSL" },
    "keyStoreFile": { "kind": "parameter", "group": "security", "label": "security", "type": "string", "javaType": "java.io.File", "deprecated": "false", "secret": "false", "description": "Client side certificate keystore to be used for encryption" },
    "keyStoreFormat": { "kind": "parameter", "group": "security", "label": "security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Keystore format to be used for payload encryption. Defaults to JKS if not set" },
    "keyStoreResource": { "kind": "parameter", "group": "security", "label": "security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Client side certificate keystore to be used for encryption. Is loaded by default from classpath but you can prefix with classpath: file: or http: to load the resource from different systems." },
    "needClientAuth": { "kind": "parameter", "group": "security", "label": "consumer,security", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Configures whether the server needs client authentication when using SSL." },
    "passphrase": { "kind": "parameter", "group": "security", "label": "security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Password setting to use in order to encrypt/decrypt payloads sent using SSH" },
    "securityProvider": { "kind": "parameter", "group": "security", "label": "security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Security provider to be used for payload encryption. Defaults to SunX509 if not set." },
    "ssl": { "kind": "parameter", "group": "security", "label": "security", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Setting to specify whether SSL encryption is applied to this endpoint" },
    "sslClientCertHeaders": { "kind": "parameter", "group": "security", "label": "security", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "When enabled and in SSL mode then the Netty consumer will enrich the Camel Message with headers having information about the client certificate such as subject name issuer name serial number and the valid date range." },
    "sslContextParameters": { "kind": "parameter", "group": "security", "label": "security", "type": "object", "javaType": "org.apache.camel.util.jsse.SSLContextParameters", "deprecated": "false", "secret": "false", "description": "To configure security using SSLContextParameters" },
    "sslHandler": { "kind": "parameter", "group": "security", "label": "security", "type": "object", "javaType": "io.netty.handler.ssl.SslHandler", "deprecated": "false", "secret": "false", "description": "Reference to a class that could be used to return an SSL Handler" },
    "trustStoreFile": { "kind": "parameter", "group": "security", "label": "security", "type": "string", "javaType": "java.io.File", "deprecated": "false", "secret": "false", "description": "Server side certificate keystore to be used for encryption" },
    "trustStoreResource": { "kind": "parameter", "group": "security", "label": "security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Server side certificate keystore to be used for encryption. Is loaded by default from classpath but you can prefix with classpath: file: or http: to load the resource from different systems." }
  }
}

