{
 "component": {
    "kind": "component",
    "scheme": "stream",
    "syntax": "stream:url",
    "title": "Stream",
    "description": "The stream: component provides access to the system-in system-out and system-err streams as well as allowing streaming of file and URL.",
    "label": "file,system",
    "deprecated": "false",
    "async": "false",
    "javaType": "org.apache.camel.component.stream.StreamComponent",
    "groupId": "org.apache.camel",
    "artifactId": "camel-stream",
    "version": "2.18.0"
  },
  "componentProperties": {
  },
  "properties": {
    "url": { "kind": "path", "group": "common", "required": "true", "type": "string", "javaType": "java.lang.String", "enum": [ "in", "out", "err", "header", "file", "url" ], "deprecated": "false", "secret": "false", "description": "When using the stream:url URI format this option specifies the URL to stream to/from. The input/output stream will be opened using the JDK URLConnection facility." },
    "encoding": { "kind": "parameter", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "You can configure the encoding (is a charset name) to use text-based streams (for example message body is a String object). If not provided Camel uses the JVM default Charset." },
    "fileName": { "kind": "parameter", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "When using the stream:file URI format this option specifies the filename to stream to/from." },
    "bridgeErrorHandler": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "groupLines": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "description": "To group X number of lines in the consumer. For example to group 10 lines and therefore only spit out an Exchange with 10 lines instead of 1 Exchange per line." },
    "groupStrategy": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "object", "javaType": "org.apache.camel.component.stream.GroupStrategy", "deprecated": "false", "secret": "false", "description": "Allows to use a custom GroupStrategy to control how to group lines." },
    "initialPromptDelay": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "long", "deprecated": "false", "secret": "false", "defaultValue": "2000", "description": "Initial delay in milliseconds before showing the message prompt. This delay occurs only once. Can be used during system startup to avoid message prompts being written while other logging is done to the system out." },
    "promptDelay": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "long", "deprecated": "false", "secret": "false", "description": "Optional delay in milliseconds before showing the message prompt." },
    "promptMessage": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Message prompt to use when reading from stream:in; for example you could set this to Enter a command:" },
    "retry": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Will retry opening the file if it's overwritten somewhat like tail --retry" },
    "scanStream": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "To be used for continuously reading a stream such as the unix tail command." },
    "scanStreamDelay": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "long", "deprecated": "false", "secret": "false", "description": "Delay in milliseconds between read attempts when using scanStream." },
    "exceptionHandler": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "string", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "RobustInOnly", "InOut", "InOptionalOut", "OutOnly", "RobustOutOnly", "OutIn", "OutOptionalIn" ], "deprecated": "false", "secret": "false", "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "autoCloseCount": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "description": "Number of messages to process before closing stream on Producer side. Never close stream by default (only when Producer is stopped). If more messages are sent the stream is reopened for another autoCloseCount batch." },
    "closeOnDone": { "kind": "parameter", "group": "producer", "label": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "This option is used in combination with Splitter and streaming to the same file. The idea is to keep the stream open and only close when the Splitter is done to improve performance. Mind this requires that you only stream to the same file and not 2 or more files." },
    "delay": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "long", "deprecated": "false", "secret": "false", "description": "Initial delay in milliseconds before producing the stream." },
    "synchronous": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)." }
  }
}

