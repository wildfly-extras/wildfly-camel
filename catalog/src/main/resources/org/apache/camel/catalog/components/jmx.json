{
 "component": {
    "kind": "component",
    "scheme": "jmx",
    "syntax": "jmx:serverURL",
    "title": "JMX",
    "description": "The jmx component allows to receive JMX notifications.",
    "label": "monitoring",
    "deprecated": "false",
    "async": "false",
    "consumerOnly": "true",
    "javaType": "org.apache.camel.component.jmx.JMXComponent",
    "groupId": "org.apache.camel",
    "artifactId": "camel-jmx",
    "version": "2.18.0"
  },
  "componentProperties": {
  },
  "properties": {
    "serverURL": { "kind": "path", "group": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "server url comes from the remaining endpoint" },
    "bridgeErrorHandler": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "format": { "kind": "parameter", "group": "consumer", "type": "string", "javaType": "java.lang.String", "enum": [ "xml", "raw" ], "deprecated": "false", "secret": "false", "defaultValue": "xml", "description": "URI Property: Format for the message body. Either xml or raw. If xml the notification is serialized to xml. If raw then the raw java object is set as the body." },
    "granularityPeriod": { "kind": "parameter", "group": "consumer", "type": "integer", "javaType": "long", "deprecated": "false", "secret": "false", "defaultValue": "10000", "description": "URI Property: monitor types only The frequency to poll the bean to check the monitor." },
    "monitorType": { "kind": "parameter", "group": "consumer", "type": "string", "javaType": "java.lang.String", "enum": [ "counter", "gauge", "string" ], "deprecated": "false", "secret": "false", "description": "URI Property: monitor types only The type of monitor to create. One of string gauge counter." },
    "objectDomain": { "kind": "parameter", "group": "consumer", "required": "true", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "URI Property: The domain for the mbean you're connecting to" },
    "objectName": { "kind": "parameter", "group": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "URI Property: The name key for the mbean you're connecting to. This value is mutually exclusive with the object properties that get passed." },
    "observedAttribute": { "kind": "parameter", "group": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "URI Property: monitor types only The attribute to observe for the monitor bean." },
    "exceptionHandler": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "string", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "RobustInOnly", "InOut", "InOptionalOut", "OutOnly", "RobustOutOnly", "OutIn", "OutOptionalIn" ], "deprecated": "false", "secret": "false", "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "handback": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "java.lang.Object", "deprecated": "false", "secret": "false", "description": "URI Property: Value to handback to the listener when a notification is received. This value will be put in the message header with the key jmx.handback" },
    "notificationFilter": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "javax.management.NotificationFilter", "deprecated": "false", "secret": "false", "description": "URI Property: Reference to a bean that implements the NotificationFilter." },
    "objectProperties": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "java.util.Map<java.lang.String,java.lang.String>", "prefix": "key.", "multiValue": "true", "deprecated": "false", "secret": "false", "description": "URI Property: properties for the object name. These values will be used if the objectName param is not set" },
    "reconnectDelay": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "defaultValue": "10", "description": "URI Property: The number of seconds to wait before attempting to retry establishment of the initial connection or attempt to reconnect a lost connection" },
    "reconnectOnConnectionFailure": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "URI Property: If true the consumer will attempt to reconnect to the JMX server when any connection failure occurs. The consumer will attempt to re-establish the JMX connection every 'x' seconds until the connection is made-- where 'x' is the configured reconnectionDelay" },
    "synchronous": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)." },
    "testConnectionOnStartup": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "URI Property: If true the consumer will throw an exception if unable to establish the JMX connection upon startup. If false the consumer will attempt to establish the JMX connection every 'x' seconds until the connection is made -- where 'x' is the configured reconnectionDelay" },
    "initThreshold": { "kind": "parameter", "group": "counter", "label": "counter", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "description": "URI Property: counter monitor only Initial threshold for the monitor. The value must exceed this before notifications are fired." },
    "modulus": { "kind": "parameter", "group": "counter", "label": "counter", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "description": "URI Property: counter monitor only The value at which the counter is reset to zero" },
    "offset": { "kind": "parameter", "group": "counter", "label": "counter", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "description": "URI Property: counter monitor only The amount to increment the threshold after it's been exceeded." },
    "differenceMode": { "kind": "parameter", "group": "gauge", "label": "counter,gauge", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "URI Property: counter gauge monitor only If true then the value reported in the notification is the difference from the threshold as opposed to the value itself." },
    "notifyHigh": { "kind": "parameter", "group": "gauge", "label": "gauge", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "URI Property: gauge monitor only If true the gauge will fire a notification when the high threshold is exceeded" },
    "notifyLow": { "kind": "parameter", "group": "gauge", "label": "gauge", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "URI Property: gauge monitor only If true the gauge will fire a notification when the low threshold is exceeded" },
    "thresholdHigh": { "kind": "parameter", "group": "gauge", "label": "gauge", "type": "number", "javaType": "java.lang.Double", "deprecated": "false", "secret": "false", "description": "URI Property: gauge monitor only Value for the gauge's high threshold" },
    "thresholdLow": { "kind": "parameter", "group": "gauge", "label": "gauge", "type": "number", "javaType": "java.lang.Double", "deprecated": "false", "secret": "false", "description": "URI Property: gauge monitor only Value for the gauge's low threshold" },
    "password": { "kind": "parameter", "group": "security", "label": "security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "true", "description": "URI Property: credentials for making a remote connection" },
    "user": { "kind": "parameter", "group": "security", "label": "security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "true", "description": "URI Property: credentials for making a remote connection" },
    "notifyDiffer": { "kind": "parameter", "group": "string", "label": "string", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "URI Property: string monitor only If true the string monitor will fire a notification when the string attribute differs from the string to compare." },
    "notifyMatch": { "kind": "parameter", "group": "string", "label": "string", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "URI Property: string monitor only If true the string monitor will fire a notification when the string attribute matches the string to compare." },
    "stringToCompare": { "kind": "parameter", "group": "string", "label": "string", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "URI Property: string monitor only Value for the string monitor's string to compare." }
  }
}

