{
 "component": {
    "kind": "component",
    "scheme": "cxfrs",
    "syntax": "cxfrs:beanId:address",
    "title": "CXF-RS",
    "description": "The cxfrs component is used for JAX-RS REST services using Apache CXF.",
    "label": "rest",
    "deprecated": "false",
    "async": "false",
    "lenientProperties": "true",
    "javaType": "org.apache.camel.component.cxf.jaxrs.CxfRsComponent",
    "groupId": "org.apache.camel",
    "artifactId": "camel-cxf",
    "version": "2.18.0"
  },
  "componentProperties": {
    "headerFilterStrategy": { "kind": "property", "type": "object", "javaType": "org.apache.camel.spi.HeaderFilterStrategy", "deprecated": "false", "secret": "false", "description": "To use a custom HeaderFilterStrategy to filter header to and from Camel message." }
  },
  "properties": {
    "beanId": { "kind": "path", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "To lookup an existing configured CxfRsEndpoint. Must used bean: as prefix." },
    "address": { "kind": "path", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The service publish address." },
    "features": { "kind": "parameter", "group": "common", "type": "array", "javaType": "java.util.List<org.apache.cxf.feature.Feature>", "deprecated": "false", "secret": "false", "description": "Set the feature list to the CxfRs endpoint." },
    "loggingFeatureEnabled": { "kind": "parameter", "group": "common", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "This option enables CXF Logging Feature which writes inbound and outbound REST messages to log." },
    "loggingSizeLimit": { "kind": "parameter", "group": "common", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "description": "To limit the total size of number of bytes the logger will output when logging feature has been enabled." },
    "modelRef": { "kind": "parameter", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "This option is used to specify the model file which is useful for the resource class without annotation. When using this option then the service class can be omitted to emulate document-only endpoints" },
    "providers": { "kind": "parameter", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Set custom JAX-RS provider(s) list to the CxfRs endpoint. You can specify a string with a list of providers to lookup in the registy separated by comma." },
    "resourceClasses": { "kind": "parameter", "group": "common", "type": "array", "javaType": "java.util.List<java.lang.Class<?>>", "deprecated": "false", "secret": "false", "description": "The resource classes which you want to export as REST service. Multiple classes can be separated by comma." },
    "schemaLocations": { "kind": "parameter", "group": "common", "type": "array", "javaType": "java.util.List<java.lang.String>", "deprecated": "false", "secret": "false", "description": "Sets the locations of the schema(s) which can be used to validate the incoming XML or JAXB-driven JSON." },
    "skipFaultLogging": { "kind": "parameter", "group": "common", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "This option controls whether the PhaseInterceptorChain skips logging the Fault that it catches." },
    "bindingStyle": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "string", "javaType": "org.apache.camel.component.cxf.jaxrs.BindingStyle", "enum": [ "SimpleConsumer", "Default", "Custom" ], "deprecated": "false", "secret": "false", "defaultValue": "Default", "description": "Sets how requests and responses will be mapped to/from Camel. Two values are possible: SimpleConsumer: This binding style processes request parameters multiparts etc. and maps them to IN headers IN attachments and to the message body. It aims to eliminate low-level processing of org.apache.cxf.message.MessageContentsList. It also also adds more flexibility and simplicity to the response mapping. Only available for consumers. Default: The default style. For consumers this passes on a MessageContentsList to the route requiring low-level processing in the route. This is the traditional binding style which simply dumps the org.apache.cxf.message.MessageContentsList coming in from the CXF stack onto the IN message body. The user is then responsible for processing it according to the contract defined by the JAX-RS method signature. Custom: allows you to specify a custom binding through the binding option." },
    "bridgeErrorHandler": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "exceptionHandler": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "string", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "RobustInOnly", "InOut", "InOptionalOut", "OutOnly", "RobustOutOnly", "OutIn", "OutOptionalIn" ], "deprecated": "false", "secret": "false", "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "hostnameVerifier": { "kind": "parameter", "group": "producer", "label": "producer", "type": "object", "javaType": "javax.net.ssl.HostnameVerifier", "deprecated": "false", "secret": "false", "description": "The hostname verifier to be used. Use the notation to reference a HostnameVerifier from the registry." },
    "sslContextParameters": { "kind": "parameter", "group": "producer", "label": "producer", "type": "object", "javaType": "org.apache.camel.util.jsse.SSLContextParameters", "deprecated": "false", "secret": "false", "description": "The Camel SSL setting reference. Use the notation to reference the SSL Context." },
    "throwExceptionOnFailure": { "kind": "parameter", "group": "producer", "label": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "This option tells the CxfRsProducer to inspect return codes and will generate an Exception if the return code is larger than 207." },
    "httpClientAPI": { "kind": "parameter", "group": "producer (advanced)", "label": "producer,advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "If it is true the CxfRsProducer will use the HttpClientAPI to invoke the service. If it is false the CxfRsProducer will use the ProxyClientAPI to invoke the service" },
    "ignoreDeleteMethodMessageBody": { "kind": "parameter", "group": "producer (advanced)", "label": "producer,advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "This option is used to tell CxfRsProducer to ignore the message body of the DELETE method when using HTTP API." },
    "maxClientCacheSize": { "kind": "parameter", "group": "producer (advanced)", "label": "producer,advanced", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "defaultValue": "10", "description": "This option allows you to configure the maximum size of the cache. The implementation caches CXF clients or ClientFactoryBean in CxfProvider and CxfRsProvider." },
    "binding": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "org.apache.camel.component.cxf.jaxrs.CxfRsBinding", "deprecated": "false", "secret": "false", "description": "To use a custom CxfBinding to control the binding between Camel Message and CXF Message." },
    "bus": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "org.apache.cxf.Bus", "deprecated": "false", "secret": "false", "description": "To use a custom configured CXF Bus." },
    "continuationTimeout": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "integer", "javaType": "long", "deprecated": "false", "secret": "false", "defaultValue": "30000", "description": "This option is used to set the CXF continuation timeout which could be used in CxfConsumer by default when the CXF server is using Jetty or Servlet transport." },
    "cxfRsEndpointConfigurer": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "org.apache.camel.component.cxf.jaxrs.CxfRsEndpointConfigurer", "deprecated": "false", "secret": "false", "description": "This option could apply the implementation of org.apache.camel.component.cxf.jaxrs.CxfRsEndpointConfigurer which supports to configure the CXF endpoint in programmatic way. User can configure the CXF server and client by implementing configureServer/Client method of CxfEndpointConfigurer." },
    "defaultBus": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Will set the default bus when CXF endpoint create a bus by itself" },
    "headerFilterStrategy": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "org.apache.camel.spi.HeaderFilterStrategy", "deprecated": "false", "secret": "false", "description": "To use a custom HeaderFilterStrategy to filter header to and from Camel message." },
    "performInvocation": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "When the option is true Camel will perform the invocation of the resource class instance and put the response object into the exchange for further processing." },
    "propagateContexts": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "When the option is true JAXRS UriInfo HttpHeaders Request and SecurityContext contexts will be available to custom CXFRS processors as typed Camel exchange properties. These contexts can be used to analyze the current requests using JAX-RS API." },
    "synchronous": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)." }
  }
}

