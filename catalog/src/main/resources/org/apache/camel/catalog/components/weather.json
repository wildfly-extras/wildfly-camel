{
 "component": {
    "kind": "component",
    "scheme": "weather",
    "syntax": "weather:name",
    "title": "Weather",
    "description": "Polls the weather information from Open Weather Map.",
    "label": "api",
    "deprecated": "false",
    "async": "false",
    "javaType": "org.apache.camel.component.weather.WeatherComponent",
    "groupId": "org.apache.camel",
    "artifactId": "camel-weather",
    "version": "2.18.0"
  },
  "componentProperties": {
  },
  "properties": {
    "name": { "kind": "path", "group": "common", "required": "true", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The name value is not used." },
    "appid": { "kind": "parameter", "group": "common", "required": "true", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "APPID ID used to authenticate the user connected to the API Server" },
    "headerName": { "kind": "parameter", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "To store the weather result in this header instead of the message body. This is useable if you want to keep current message body as-is." },
    "language": { "kind": "parameter", "group": "common", "type": "string", "javaType": "org.apache.camel.component.weather.WeatherLanguage", "enum": [ "en", "ru", "it", "es", "sp", "uk", "ua", "de", "pt", "ro", "pl", "fi", "nl", "fr", "bg", "sv", "se", "zh_tw", "zh", "zh_cn", "tr", "hr", "ca" ], "deprecated": "false", "secret": "false", "defaultValue": "en", "description": "Language of the response." },
    "mode": { "kind": "parameter", "group": "common", "type": "string", "javaType": "org.apache.camel.component.weather.WeatherMode", "enum": [ "HTML", "JSON", "XML" ], "deprecated": "false", "secret": "false", "defaultValue": "JSON", "description": "The output format of the weather data." },
    "period": { "kind": "parameter", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "If null the current weather will be returned else use values of 5 7 14 days. Only the numeric value for the forecast period is actually parsed so spelling capitalisation of the time period is up to you (its ignored)" },
    "units": { "kind": "parameter", "group": "common", "type": "string", "javaType": "org.apache.camel.component.weather.WeatherUnits", "enum": [ "IMPERIAL", "METRIC" ], "deprecated": "false", "secret": "false", "description": "The units for temperature measurement." },
    "weatherApi": { "kind": "parameter", "group": "common", "type": "string", "javaType": "org.apache.camel.component.weather.WeatherApi", "enum": [ "Current", "Station", "Hourly", "Daily" ], "deprecated": "false", "secret": "false", "description": "The API to be use (current forecast/3 hour forecast daily station)" },
    "bridgeErrorHandler": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "sendEmptyMessageWhenIdle": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead." },
    "exceptionHandler": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "string", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "RobustInOnly", "InOut", "InOptionalOut", "OutOnly", "RobustOutOnly", "OutIn", "OutOptionalIn" ], "deprecated": "false", "secret": "false", "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "pollStrategy": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.PollingConsumerPollStrategy", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel." },
    "httpConnectionManager": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "org.apache.commons.httpclient.HttpConnectionManager", "deprecated": "false", "secret": "false", "description": "To use a custom HttpConnectionManager to manage connections" },
    "synchronous": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)." },
    "backoffErrorThreshold": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "int", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in." },
    "backoffIdleThreshold": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "int", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "The number of subsequent idle polls that should happen before the backoffMultipler should kick-in." },
    "backoffMultiplier": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "int", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured." },
    "delay": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "long", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "500", "description": "Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)." },
    "greedy": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages." },
    "initialDelay": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "long", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "1000", "description": "Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)." },
    "runLoggingLevel": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "string", "javaType": "org.apache.camel.LoggingLevel", "enum": [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ], "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "TRACE", "description": "The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that." },
    "scheduledExecutorService": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "object", "javaType": "java.util.concurrent.ScheduledExecutorService", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool." },
    "scheduler": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "string", "javaType": "org.apache.camel.spi.ScheduledPollConsumerScheduler", "enum": [ "none", "spring", "quartz2" ], "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "none", "description": "To use a cron scheduler from either camel-spring or camel-quartz2 component" },
    "schedulerProperties": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "object", "javaType": "java.util.Map<java.lang.String,java.lang.Object>", "prefix": "scheduler.", "multiValue": "true", "deprecated": "false", "secret": "false", "description": "To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler." },
    "startScheduler": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Whether the scheduler should be auto started." },
    "timeUnit": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "string", "javaType": "java.util.concurrent.TimeUnit", "enum": [ "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS" ], "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "MILLISECONDS", "description": "Time unit for initialDelay and delay options." },
    "useFixedDelay": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details." },
    "cnt": { "kind": "parameter", "group": "filter", "label": "filter", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "description": "Number of results to be found" },
    "ids": { "kind": "parameter", "group": "filter", "label": "filter", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "List of id's of city/stations. You can separate multiple ids by comma." },
    "lat": { "kind": "parameter", "group": "filter", "label": "filter", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Latitude of location. You can use lat and lon options instead of location. For boxed queries this is the bottom latitude." },
    "location": { "kind": "parameter", "group": "filter", "label": "filter", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "If null Camel will try and determine your current location using the geolocation of your ip address else specify the citycountry. For well known city names Open Weather Map will determine the best fit but multiple results may be returned. Hence specifying and country as well will return more accurate data. If you specify current as the location then the component will try to get the current latitude and longitude and use that to get the weather details. You can use lat and lon options instead of location." },
    "lon": { "kind": "parameter", "group": "filter", "label": "filter", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Longitude of location. You can use lat and lon options instead of location. For boxed queries this is the left longtitude." },
    "rightLon": { "kind": "parameter", "group": "filter", "label": "filter", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "For boxed queries this is the right longtitude. Needs to be used in combination with topLat and zoom." },
    "topLat": { "kind": "parameter", "group": "filter", "label": "filter", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "For boxed queries this is the top latitude. Needs to be used in combination with rightLon and zoom." },
    "zip": { "kind": "parameter", "group": "filter", "label": "filter", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Zip-code e.g. 94040us" },
    "zoom": { "kind": "parameter", "group": "filter", "label": "filter", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "description": "For boxed queries this is the zoom. Needs to be used in combination with rightLon and topLat." },
    "proxyAuthDomain": { "kind": "parameter", "group": "proxy", "label": "proxy", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Domain for proxy NTLM authentication" },
    "proxyAuthHost": { "kind": "parameter", "group": "proxy", "label": "proxy", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Optional host for proxy NTLM authentication" },
    "proxyAuthMethod": { "kind": "parameter", "group": "proxy", "label": "proxy", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Authentication method for proxy either as Basic Digest or NTLM." },
    "proxyAuthPassword": { "kind": "parameter", "group": "proxy", "label": "proxy", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Password for proxy authentication" },
    "proxyAuthUsername": { "kind": "parameter", "group": "proxy", "label": "proxy", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Username for proxy authentication" },
    "proxyHost": { "kind": "parameter", "group": "proxy", "label": "proxy", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The proxy host name" },
    "proxyPort": { "kind": "parameter", "group": "proxy", "label": "proxy", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "description": "The proxy port number" }
  }
}

