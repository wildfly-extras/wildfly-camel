{
 "component": {
    "kind": "component",
    "scheme": "pop3s",
    "alternativeSchemes": "imap,imaps,pop3,pop3s,smtp,smtps",
    "syntax": "pop3s:host:port",
    "alternativeSyntax": "pop3s:username:password@host:port",
    "title": "POP3S",
    "description": "To send or receive emails using imap/pop3 or stmp protocols.",
    "label": "mail",
    "deprecated": "false",
    "async": "false",
    "javaType": "org.apache.camel.component.mail.MailComponent",
    "groupId": "org.apache.camel",
    "artifactId": "camel-mail",
    "version": "2.18.0"
  },
  "componentProperties": {
    "configuration": { "kind": "property", "type": "object", "javaType": "org.apache.camel.component.mail.MailConfiguration", "deprecated": "false", "secret": "false", "description": "Sets the Mail configuration" },
    "contentTypeResolver": { "kind": "property", "type": "object", "javaType": "org.apache.camel.component.mail.ContentTypeResolver", "deprecated": "false", "secret": "false", "description": "Resolver to determine Content-Type for file attachments." }
  },
  "properties": {
    "host": { "kind": "path", "group": "common", "required": "true", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The mail server host name" },
    "port": { "kind": "path", "group": "common", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "description": "The port number of the mail server" },
    "bridgeErrorHandler": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "closeFolder": { "kind": "parameter", "group": "consumer", "label": "consumer", "required": "false", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Whether the consumer should close the folder after polling. Setting this option to false and having disconnect=false as well then the consumer keep the folder open between polls." },
    "copyTo": { "kind": "parameter", "group": "consumer", "label": "consumer", "required": "false", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "After processing a mail message it can be copied to a mail folder with the given name. You can override this configuration value with a header with the key copyTo allowing you to copy messages to folder names configured at runtime." },
    "delete": { "kind": "parameter", "group": "consumer", "label": "consumer", "required": "false", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Deletes the messages after they have been processed. This is done by setting the DELETED flag on the mail message. If false the SEEN flag is set instead. As of Camel 2.10 you can override this configuration option by setting a header with the key delete to determine if the mail should be deleted or not." },
    "disconnect": { "kind": "parameter", "group": "consumer", "label": "consumer", "required": "false", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Whether the consumer should disconnect after polling. If enabled this forces Camel to connect on each poll." },
    "handleFailedMessage": { "kind": "parameter", "group": "consumer", "label": "consumer", "required": "false", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If the mail consumer cannot retrieve a given mail message then this option allows to handle the caused exception by the consumer's error handler. By enable the bridge error handler on the consumer then the Camel routing error handler can handle the exception instead. The default behavior would be the consumer throws an exception and no mails from the batch would be able to be routed by Camel." },
    "maxMessagesPerPoll": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "description": "Specifies the maximum number of messages to gather per poll. By default no maximum is set. Can be used to set a limit of e.g. 1000 to avoid downloading thousands of files when the server starts up. Set a value of 0 or negative to disable this option." },
    "peek": { "kind": "parameter", "group": "consumer", "label": "consumer", "required": "false", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Will mark the javax.mail.Message as peeked before processing the mail message. This applies to IMAPMessage messages types only. By using peek the mail will not be eager marked as SEEN on the mail server which allows us to rollback the mail message if there is an error processing in Camel." },
    "sendEmptyMessageWhenIdle": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead." },
    "skipFailedMessage": { "kind": "parameter", "group": "consumer", "label": "consumer", "required": "false", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If the mail consumer cannot retrieve a given mail message then this option allows to skip the message and move on to retrieve the next mail message. The default behavior would be the consumer throws an exception and no mails from the batch would be able to be routed by Camel." },
    "unseen": { "kind": "parameter", "group": "consumer", "label": "consumer", "required": "false", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Whether to limit by unseen mails only." },
    "exceptionHandler": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "string", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "RobustInOnly", "InOut", "InOptionalOut", "OutOnly", "RobustOutOnly", "OutIn", "OutOptionalIn" ], "deprecated": "false", "secret": "false", "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "fetchSize": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "required": "false", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "defaultValue": "-1", "description": "Sets the maximum number of messages to consume during a poll. This can be used to avoid overloading a mail server if a mailbox folder contains a lot of messages. Default value of -1 means no fetch size and all messages will be consumed. Setting the value to 0 is a special corner case where Camel will not consume any messages at all." },
    "folderName": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "defaultValue": "INBOX", "description": "The folder to poll." },
    "mailUidGenerator": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.component.mail.MailUidGenerator", "deprecated": "false", "secret": "false", "description": "A pluggable MailUidGenerator that allows to use custom logic to generate UUID of the mail message." },
    "mapMailMessage": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Specifies whether Camel should map the received mail message to Camel body/headers. If set to true the body of the mail message is mapped to the body of the Camel IN message and the mail headers are mapped to IN headers. If this option is set to false then the IN message contains a raw javax.mail.Message. You can retrieve this raw message by calling exchange.getIn().getBody(javax.mail.Message.class)." },
    "pollStrategy": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.PollingConsumerPollStrategy", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel." },
    "postProcessAction": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.component.mail.MailBoxPostProcessAction", "deprecated": "false", "secret": "false", "description": "Refers to an MailBoxPostProcessAction for doing post processing tasks on the mailbox once the normal processing ended." },
    "bcc": { "kind": "parameter", "group": "producer", "label": "producer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Sets the BCC email address. Separate multiple email addresses with comma." },
    "cc": { "kind": "parameter", "group": "producer", "label": "producer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Sets the CC email address. Separate multiple email addresses with comma." },
    "from": { "kind": "parameter", "group": "producer", "label": "producer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "defaultValue": "camel@localhost", "description": "The from email address" },
    "replyTo": { "kind": "parameter", "group": "producer", "label": "producer", "required": "false", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The Reply-To recipients (the receivers of the response mail). Separate multiple email addresses with a comma." },
    "subject": { "kind": "parameter", "group": "producer", "label": "producer", "required": "false", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The Subject of the message being sent. Note: Setting the subject in the header takes precedence over this option." },
    "to": { "kind": "parameter", "group": "producer", "label": "producer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Sets the To email address. Separate multiple email addresses with comma." },
    "javaMailSender": { "kind": "parameter", "group": "producer (advanced)", "label": "producer,advanced", "required": "false", "type": "object", "javaType": "org.apache.camel.component.mail.JavaMailSender", "deprecated": "false", "secret": "false", "description": "To use a custom org.apache.camel.component.mail.JavaMailSender for sending emails." },
    "additionalJavaMailProperties": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "java.util.Properties", "prefix": "mail.", "multiValue": "true", "deprecated": "false", "secret": "false", "description": "Sets additional java mail properties that will append/override any default properties that is set based on all the other options. This is useful if you need to add some special options but want to keep the others as is." },
    "alternativeBodyHeader": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "defaultValue": "CamelMailAlternativeBody", "description": "Specifies the key to an IN message header that contains an alternative email body. For example if you send emails in text/html format and want to provide an alternative mail body for non-HTML email clients set the alternative mail body with this key as a header." },
    "attachmentsContentTransferEncodingResolver": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "org.apache.camel.component.mail.AttachmentsContentTransferEncodingResolver", "deprecated": "false", "secret": "false", "description": "To use a custom AttachmentsContentTransferEncodingResolver to resolve what content-type-encoding to use for attachments." },
    "binding": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "org.apache.camel.component.mail.MailBinding", "deprecated": "false", "secret": "false", "description": "Sets the binding used to convert from a Camel message to and from a Mail message" },
    "connectionTimeout": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "defaultValue": "30000", "description": "The connection timeout in milliseconds." },
    "contentType": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "defaultValue": "text/plain", "description": "The mail message content type. Use text/html for HTML mails." },
    "contentTypeResolver": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "org.apache.camel.component.mail.ContentTypeResolver", "deprecated": "false", "secret": "false", "description": "Resolver to determine Content-Type for file attachments." },
    "debugMode": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Enable debug mode on the underlying mail framework. The SUN Mail framework logs the debug messages to System.out by default." },
    "headerFilterStrategy": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "org.apache.camel.spi.HeaderFilterStrategy", "deprecated": "false", "secret": "false", "description": "To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter headers." },
    "ignoreUnsupportedCharset": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Option to let Camel ignore unsupported charset in the local JVM when sending mails. If the charset is unsupported then charset=XXX (where XXX represents the unsupported charset) is removed from the content-type and it relies on the platform default instead." },
    "ignoreUriScheme": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Option to let Camel ignore unsupported charset in the local JVM when sending mails. If the charset is unsupported then charset=XXX (where XXX represents the unsupported charset) is removed from the content-type and it relies on the platform default instead." },
    "session": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "javax.mail.Session", "deprecated": "false", "secret": "false", "description": "Specifies the mail session that camel should use for all mail interactions. Useful in scenarios where mail sessions are created and managed by some other resource such as a JavaEE container. If this is not specified Camel automatically creates the mail session for you." },
    "synchronous": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)." },
    "useInlineAttachments": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Whether to use disposition inline or attachment." },
    "idempotentRepository": { "kind": "parameter", "group": "filter", "label": "consumer,filter", "type": "object", "javaType": "org.apache.camel.spi.IdempotentRepository<java.lang.String>", "deprecated": "false", "secret": "false", "description": "A pluggable repository org.apache.camel.spi.IdempotentRepository which allows to cluster consuming from the same mailbox and let the repository coordinate whether a mail message is valid for the consumer to process. By default no repository is in use." },
    "idempotentRepositoryRemoveOnCommit": { "kind": "parameter", "group": "filter", "label": "consumer,filter", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "When using idempotent repository then when the mail message has been successfully processed and is committed should the message id be removed from the idempotent repository (default) or be kept in the repository. By default its assumed the message id is unique and has no value to be kept in the repository because the mail message will be marked as seen/moved or deleted to prevent it from being consumed again. And therefore having the message id stored in the idempotent repository has little value. However this option allows to store the message id for whatever reason you may have." },
    "searchTerm": { "kind": "parameter", "group": "filter", "label": "consumer,filter", "type": "object", "javaType": "javax.mail.search.SearchTerm", "prefix": "searchTerm.", "multiValue": "true", "deprecated": "false", "secret": "false", "description": "Refers to a javax.mail.search.SearchTerm which allows to filter mails based on search criteria such as subject body from sent after a certain date etc." },
    "backoffErrorThreshold": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "int", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in." },
    "backoffIdleThreshold": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "int", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "The number of subsequent idle polls that should happen before the backoffMultipler should kick-in." },
    "backoffMultiplier": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "int", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured." },
    "delay": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "long", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "60000", "description": "Milliseconds before the next poll." },
    "greedy": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages." },
    "initialDelay": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "integer", "javaType": "long", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "1000", "description": "Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)." },
    "runLoggingLevel": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "string", "javaType": "org.apache.camel.LoggingLevel", "enum": [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ], "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "TRACE", "description": "The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that." },
    "scheduledExecutorService": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "object", "javaType": "java.util.concurrent.ScheduledExecutorService", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool." },
    "scheduler": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "string", "javaType": "org.apache.camel.spi.ScheduledPollConsumerScheduler", "enum": [ "none", "spring", "quartz2" ], "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "none", "description": "To use a cron scheduler from either camel-spring or camel-quartz2 component" },
    "schedulerProperties": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "object", "javaType": "java.util.Map<java.lang.String,java.lang.Object>", "prefix": "scheduler.", "multiValue": "true", "deprecated": "false", "secret": "false", "description": "To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler." },
    "startScheduler": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Whether the scheduler should be auto started." },
    "timeUnit": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "string", "javaType": "java.util.concurrent.TimeUnit", "enum": [ "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS" ], "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "MILLISECONDS", "description": "Time unit for initialDelay and delay options." },
    "useFixedDelay": { "kind": "parameter", "group": "scheduler", "label": "consumer,scheduler", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details." },
    "sortTerm": { "kind": "parameter", "group": "sort", "label": "consumer,sort", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Sorting order for messages. Only natively supported for IMAP. Emulated to some degree when using POP3 or when IMAP server does not have the SORT capability." },
    "dummyTrustManager": { "kind": "parameter", "group": "security", "label": "security", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "To use a dummy security setting for trusting all certificates. Should only be used for development mode and not production." },
    "password": { "kind": "parameter", "group": "security", "label": "security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "true", "description": "The password for login" },
    "sslContextParameters": { "kind": "parameter", "group": "security", "label": "security", "type": "object", "javaType": "org.apache.camel.util.jsse.SSLContextParameters", "deprecated": "false", "secret": "false", "description": "To configure security using SSLContextParameters." },
    "username": { "kind": "parameter", "group": "security", "label": "security", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "true", "description": "The username for login" }
  }
}

