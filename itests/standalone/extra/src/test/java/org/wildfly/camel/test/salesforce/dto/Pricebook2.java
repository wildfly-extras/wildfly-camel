/*
 * Salesforce DTO generated by camel-salesforce-maven-plugin.
 */
package org.wildfly.camel.test.salesforce.dto;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Generated;

import com.thoughtworks.xstream.annotations.XStreamAlias;

import org.apache.camel.component.salesforce.api.dto.AbstractDescribedSObjectBase;
import org.apache.camel.component.salesforce.api.dto.Attributes;
import org.apache.camel.component.salesforce.api.dto.ChildRelationShip;
import org.apache.camel.component.salesforce.api.dto.InfoUrls;
import org.apache.camel.component.salesforce.api.dto.NamedLayoutInfo;
import org.apache.camel.component.salesforce.api.dto.RecordTypeInfo;
import org.apache.camel.component.salesforce.api.dto.SObjectDescription;
import org.apache.camel.component.salesforce.api.dto.SObjectDescriptionUrls;
import org.apache.camel.component.salesforce.api.dto.SObjectField;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Salesforce DTO for SObject Pricebook2
 */
@Generated("org.apache.camel.maven.CamelSalesforceMojo")
@XStreamAlias("Pricebook2")
public class Pricebook2 extends AbstractDescribedSObjectBase {

    public Pricebook2() {
        getAttributes().setType("Pricebook2");
    }

    private static final SObjectDescription DESCRIPTION = createSObjectDescription();

    private Boolean IsActive;

    @JsonProperty("IsActive")
    public Boolean getIsActive() {
        return this.IsActive;
    }

    @JsonProperty("IsActive")
    public void setIsActive(Boolean IsActive) {
        this.IsActive = IsActive;
    }

    private String Description;

    @JsonProperty("Description")
    public String getDescription() {
        return this.Description;
    }

    @JsonProperty("Description")
    public void setDescription(String Description) {
        this.Description = Description;
    }

    private Boolean IsStandard;

    @JsonProperty("IsStandard")
    public Boolean getIsStandard() {
        return this.IsStandard;
    }

    @JsonProperty("IsStandard")
    public void setIsStandard(Boolean IsStandard) {
        this.IsStandard = IsStandard;
    }

     private QueryRecordsOpportunity Opportunities;

    @JsonProperty("Opportunities")
    public QueryRecordsOpportunity getOpportunities() {
        return Opportunities;
    }

    @JsonProperty("Opportunities")
    public void setOpportunities(QueryRecordsOpportunity Opportunities) {
        this.Opportunities = Opportunities;
    }
    private QueryRecordsOrder Orders;

    @JsonProperty("Orders")
    public QueryRecordsOrder getOrders() {
        return Orders;
    }

    @JsonProperty("Orders")
    public void setOrders(QueryRecordsOrder Orders) {
        this.Orders = Orders;
    }

    @Override
    public final SObjectDescription description() {
        return DESCRIPTION;
    }

    private static SObjectDescription createSObjectDescription() {
        final SObjectDescription description = new SObjectDescription();



        final List<SObjectField> fields1 = new ArrayList<>();
        description.setFields(fields1);

        final SObjectField sObjectField1 = createField("Id", "Price Book ID", "id", "tns:ID", 18, false, false, false, false, false, false, true);
        fields1.add(sObjectField1);
        final SObjectField sObjectField2 = createField("IsDeleted", "Deleted", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField2);
        final SObjectField sObjectField3 = createField("Name", "Price Book Name", "string", "xsd:string", 255, false, false, true, false, false, false, true);
        fields1.add(sObjectField3);
        final SObjectField sObjectField4 = createField("CreatedDate", "Created Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField4);
        final SObjectField sObjectField5 = createField("CreatedById", "Created By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField5);
        final SObjectField sObjectField6 = createField("LastModifiedDate", "Last Modified Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField6);
        final SObjectField sObjectField7 = createField("LastModifiedById", "Last Modified By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField7);
        final SObjectField sObjectField8 = createField("SystemModstamp", "System Modstamp", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField8);
        final SObjectField sObjectField9 = createField("LastViewedDate", "Last Viewed Date", "datetime", "xsd:dateTime", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField9);
        final SObjectField sObjectField10 = createField("LastReferencedDate", "Last Referenced Date", "datetime", "xsd:dateTime", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField10);
        final SObjectField sObjectField11 = createField("IsActive", "Active", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField11);
        final SObjectField sObjectField12 = createField("Description", "Description", "string", "xsd:string", 255, false, true, false, false, false, false, false);
        fields1.add(sObjectField12);
        final SObjectField sObjectField13 = createField("IsStandard", "Is Standard Price Book", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField13);

        description.setLabel("Price Book");
        description.setLabelPlural("Price Books");
        description.setName("Pricebook2");

        final SObjectDescriptionUrls sObjectDescriptionUrls1 = new SObjectDescriptionUrls();
        sObjectDescriptionUrls1.setCompactLayouts("/services/data/v34.0/sobjects/Pricebook2/describe/compactLayouts");
        sObjectDescriptionUrls1.setDescribe("/services/data/v34.0/sobjects/Pricebook2/describe");
        sObjectDescriptionUrls1.setLayouts("/services/data/v34.0/sobjects/Pricebook2/describe/layouts");
        sObjectDescriptionUrls1.setRowTemplate("/services/data/v34.0/sobjects/Pricebook2/{ID}");
        sObjectDescriptionUrls1.setSobject("/services/data/v34.0/sobjects/Pricebook2");
        sObjectDescriptionUrls1.setUiDetailTemplate("https://eu13.salesforce.com/{ID}");
        sObjectDescriptionUrls1.setUiEditTemplate("https://eu13.salesforce.com/{ID}/e");
        sObjectDescriptionUrls1.setUiNewRecord("https://eu13.salesforce.com/01s/e");
        description.setUrls(sObjectDescriptionUrls1);

        return description;
    }
}
