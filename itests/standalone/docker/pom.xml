<?xml version="1.0" encoding="UTF-8"?>
<!--
  #%L
  Wildfly Camel Testsuite
  %%
  Copyright (C) 2013 - 2014 RedHat
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->


<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.wildfly.camel</groupId>
        <artifactId>wildfly-camel-itests-standalone</artifactId>
        <version>11.2.0-SNAPSHOT</version>
    </parent>

    <name>Wildfly Camel :: Testsuite :: Standalone :: Docker</name>
    <artifactId>wildfly-camel-itests-standalone-docker</artifactId>

    <!-- Properties -->
    <properties>
        <server.config>standalone-full.xml</server.config>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- [ENTESB-13570] Camel defines version of snakeyaml incompatible with arquillian-docker -->
            <dependency>
                <groupId>org.yaml</groupId>
                <artifactId>snakeyaml</artifactId>
                <version>${version.arquillian.cube.snakeyaml}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    
    <dependencies>
        <dependency>
            <groupId>org.arquillian.cube</groupId>
            <artifactId>arquillian-cube-docker</artifactId>
        </dependency>
        <dependency>
            <groupId>org.arquillian.cube</groupId>
            <artifactId>arquillian-cube-requirement</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-consul</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-couchdb</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-etcd</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-google-pubsub</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-influxdb</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-irc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-lra</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-nats</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-nsq</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-solr</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-stomp</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
        </dependency>
        <dependency>
            <groupId>org.awaitility</groupId>
            <artifactId>awaitility</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.jboss.galleon</groupId>
                <artifactId>galleon-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>groovy-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <phase>process-resources</phase>
                    </execution>
                </executions>
                <configuration>
                    <source>
                        import java.net.InetAddress
                        import java.nio.file.Files
                        import java.nio.file.Paths
                        import java.util.regex.Matcher

                        def skip = (System.getProperty("skipTests") != null || System.getProperty("skipDockerPull") != null)
                        if (!skip) {
                            // Pull before tests run inside of the container due to: https://issues.jboss.org/browse/ARQ-688
                            boolean dockerAvailable = System.getenv("DOCKER_HOST") != null || Files.exists(Paths.get("/var/run/docker.sock"))
                            if (dockerAvailable) {
                                def cubeSpec = new File(project.basedir.path + "/src/test/resources/arquillian.xml").text
                                Matcher matcher = cubeSpec =~ /.*image: (.*)/
                                while (matcher.find()) {
                                    def image = matcher.group(1)

                                    // Replace maven properties in image names
                                    def props = (image =~ /.*\{(.*?)\}.*/)
                                    if (props.matches()) {
                                        def propName = props[0][1]
                                        def propValue = properties.get(propName)
                                        image = image.replace("\${${propName}}", propValue)
                                    }

                                    println "[DOCKER] Pulling Docker image: ${image}"
                                    "docker pull ${image}".execute().waitForProcessOutput(System.out, System.err)
                                }
                            }
                        }

                        // Enables docker.host maven property to be used in arquillian.xml
                        String dockerHost = System.getenv("DOCKER_HOST")
                        System.out.println("DOCKER_HOST: " + dockerHost)
                        if (dockerHost == null) {
                            project.properties["docker.host"] = InetAddress.getLocalHost().getHostAddress()
                        } else {
                            URI uri = new URI(dockerHost)
                            project.properties["docker.host"] = uri.getHost()
                        }
                        System.out.println("docker.host: " + project.properties["docker.host"])
                    </source>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <systemPropertyVariables>
                        <org.jboss.remoting-jmx.timeout>300</org.jboss.remoting-jmx.timeout>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
